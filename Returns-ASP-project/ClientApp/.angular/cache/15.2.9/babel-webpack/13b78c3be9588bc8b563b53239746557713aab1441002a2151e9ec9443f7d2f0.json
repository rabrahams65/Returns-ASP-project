{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../api/services\";\nimport * as i3 from \"@angular/forms\";\nexport class AddCustomerComponent {\n  constructor(activatedRoute, customerService, fb, router) {\n    this.activatedRoute = activatedRoute;\n    this.customerService = customerService;\n    this.fb = fb;\n    this.router = router;\n    this.customerId = '';\n    this.customer = {};\n    this.showToast = false;\n    this.message = '';\n    this.customerAlreadyExists = 'Customer already exists';\n    this.customerIdFromTemplate = '';\n    this.customerList = [];\n    this.shortCodeFromTemplate = '';\n    this.shortCodeAlreadyExists = 'Short Code already exists';\n    this.form = this.fb.group({\n      customerName: [''],\n      email: [''],\n      address: [''],\n      shortCode: ['']\n    });\n    this.findCustomer = customerId => {\n      this.customerId = customerId ?? 'not passed';\n      this.customerService.findCustomer({\n        id: customerId\n      }).subscribe(c => {\n        this.customer = c;\n        this.form.controls.customerName.setValue(c.customerName);\n        this.form.controls.email.setValue(c.email);\n        this.form.controls.address.setValue(c.address);\n        this.form.controls.shortCode.setValue(c.shortCode);\n      }, this.handleError);\n    };\n    this.handleError = err => {\n      if (err.status == 404) {\n        this.router.navigate(['/customers']);\n      }\n      console.log(\"Response Error. Status: \", err.status);\n      console.log(\"Response Error. Status: \", err.statusText);\n      console.log(err);\n    };\n  }\n  ngOnInit() {\n    this.activatedRoute.paramMap.subscribe(p => {\n      this.findCustomer(p.get(\"customerId\"));\n      console.log(this.customerId + ' ' + p.get(\"customerId\"));\n    });\n    this.customerService.searchCustomer().subscribe(c => this.customerList = c);\n  }\n  update() {\n    if (this.customerIdFromTemplate == this.customerAlreadyExists || this.shortCodeFromTemplate == this.shortCodeAlreadyExists) {\n      return;\n    }\n    let editedCustomer = {\n      id: this.customer.id,\n      customerName: this.form.controls.customerName.value,\n      email: this.form.controls.email.value,\n      address: this.form.controls.address.value,\n      shortCode: this.form.controls.shortCode.value\n    };\n    this.customerService.updateCustomer({\n      id: this.customer.id,\n      body: editedCustomer\n    }).subscribe(() => {\n      this.customerService.findCustomer({\n        id: this.customer.id\n      }).subscribe(c => {\n        if (c.id == editedCustomer.id && c.customerName == editedCustomer.customerName && c.email == editedCustomer.email && c.address == editedCustomer.address && c.shortCode == editedCustomer.shortCode) {\n          this.showToast = true;\n          if (this.form.valid) {\n            this.message = 'Customer updated successfully';\n            console.log('Customer updated successfully');\n          } else if (this.form.valid && !this.form.touched && !this.form.dirty) {\n            this.message = 'Nothing updated';\n            console.log('Nothing updated');\n          }\n          //this.appService.setMessage(this.message);\n          //this.appService.showToast(this.showToast)\n          this.router.navigate(['/customers']);\n        }\n      });\n    });\n  }\n  customerExists(customerName) {\n    this.customerIdFromTemplate = '';\n    if (this.customer.customerName?.toLowerCase().trim() != customerName.toLowerCase().trim()) {\n      let customerFound = this.customerList.filter(c => c.customerName?.toLowerCase().trim() == customerName.toLowerCase().trim());\n      if (customerFound.length > 0) {\n        this.customerIdFromTemplate = this.customerAlreadyExists;\n      }\n    }\n  }\n  shortCodeExists(shortCode) {\n    this.shortCodeFromTemplate = '';\n    if (this.customer.shortCode?.toLowerCase().trim() != shortCode.toLowerCase().trim()) {\n      let skuFound = this.customerList.filter(s => s.shortCode?.toLowerCase().trim() == shortCode.toLowerCase().trim());\n      if (skuFound.length > 0) {\n        this.shortCodeFromTemplate = this.shortCodeAlreadyExists;\n      }\n    }\n  }\n}\n_class = AddCustomerComponent;\n_class.ɵfac = function AddCustomerComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.CustomerService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i1.Router));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-add-customer\"]],\n  decls: 2,\n  vars: 0,\n  template: function AddCustomerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"add-customer works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;AAYA,OAAM,MAAOA,oBAAoB;EAE/BC,YAAoBC,cAA8B,EAAUC,eAAgC,EAAUC,EAAe,EAC3GC,MAAc;IADJ,mBAAc,GAAdH,cAAc;IAA0B,oBAAe,GAAfC,eAAe;IAA2B,OAAE,GAAFC,EAAE;IAC9F,WAAM,GAANC,MAAM;IAChB,eAAU,GAAG,EAAE;IACf,aAAQ,GAAe,EAAE;IACzB,cAAS,GAAG,KAAK;IACjB,YAAO,GAAG,EAAE;IACZ,0BAAqB,GAAG,yBAAyB;IACjD,2BAAsB,GAAG,EAAE;IAC3B,iBAAY,GAAiB,EAAE;IAC/B,0BAAqB,GAAG,EAAE;IAC1B,2BAAsB,GAAG,2BAA2B;IAEpD,SAAI,GAAG,IAAI,CAACD,EAAE,CAACE,KAAK,CAAC;MACnBC,YAAY,EAAE,CAAC,EAAE,CAAC;MAClBC,KAAK,EAAE,CAAC,EAAE,CAAC;MACXC,OAAO,EAAE,CAAC,EAAE,CAAC;MACbC,SAAS,EAAE,CAAC,EAAE;KACf,CAAC;IAOM,iBAAY,GAAIC,UAAyB,IAAI;MACnD,IAAI,CAACA,UAAU,GAAGA,UAAU,IAAI,YAAY;MAE5C,IAAI,CAACR,eAAe,CAACS,YAAY,CAAC;QAAEC,EAAE,EAAEF;MAAW,CAAE,CAAC,CAACG,SAAS,CAACC,CAAC,IAAG;QACnE,IAAI,CAACC,QAAQ,GAAGD,CAAC;QACjB,IAAI,CAACE,IAAI,CAACC,QAAQ,CAACX,YAAY,CAACY,QAAQ,CAACJ,CAAC,CAACR,YAAa,CAAC;QACzD,IAAI,CAACU,IAAI,CAACC,QAAQ,CAACV,KAAK,CAACW,QAAQ,CAACJ,CAAC,CAACP,KAAM,CAAC;QAC3C,IAAI,CAACS,IAAI,CAACC,QAAQ,CAACT,OAAO,CAACU,QAAQ,CAACJ,CAAC,CAACN,OAAQ,CAAC;QAC/C,IAAI,CAACQ,IAAI,CAACC,QAAQ,CAACR,SAAS,CAACS,QAAQ,CAACJ,CAAC,CAACL,SAAU,CAAC;MACrD,CAAC,EAAE,IAAI,CAACU,WAAW,CAAC;IACtB,CAAC;IAEO,gBAAW,GAAIC,GAAQ,IAAI;MAEjC,IAAIA,GAAG,CAACC,MAAM,IAAI,GAAG,EAAE;QACrB,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;;MAGtCC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEJ,GAAG,CAACC,MAAM,CAAC;MACnDE,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEJ,GAAG,CAACK,UAAU,CAAC;MACvDF,OAAO,CAACC,GAAG,CAACJ,GAAG,CAAC;IAClB,CAAC;EA5C2B;EAkB5BM,QAAQ;IACN,IAAI,CAACzB,cAAc,CAAC0B,QAAQ,CAACd,SAAS,CAACe,CAAC,IAAG;MAAG,IAAI,CAACjB,YAAY,CAACiB,CAAC,CAACC,GAAG,CAAC,YAAY,CAAC,CAAC;MAAEN,OAAO,CAACC,GAAG,CAAC,IAAI,CAACd,UAAU,GAAG,GAAG,GAAGkB,CAAC,CAACC,GAAG,CAAC,YAAY,CAAC,CAAC;IAAC,CAAC,CAAC;IACjJ,IAAI,CAAC3B,eAAe,CAAC4B,cAAc,EAAE,CAACjB,SAAS,CAACC,CAAC,IAAI,IAAI,CAACiB,YAAY,GAAGjB,CAAC,CAAC;EAC7E;EAyBAkB,MAAM;IACJ,IAAI,IAAI,CAACC,sBAAsB,IAAI,IAAI,CAACC,qBAAqB,IAAI,IAAI,CAACC,qBAAqB,IAAI,IAAI,CAACC,sBAAsB,EAAE;MAC1H;;IAGF,IAAIC,cAAc,GAAe;MAC/BzB,EAAE,EAAE,IAAI,CAACG,QAAQ,CAACH,EAAE;MACpBN,YAAY,EAAE,IAAI,CAACU,IAAI,CAACC,QAAQ,CAACX,YAAY,CAACgC,KAAK;MACnD/B,KAAK,EAAE,IAAI,CAACS,IAAI,CAACC,QAAQ,CAACV,KAAK,CAAC+B,KAAK;MACrC9B,OAAO,EAAE,IAAI,CAACQ,IAAI,CAACC,QAAQ,CAACT,OAAO,CAAC8B,KAAK;MACzC7B,SAAS,EAAE,IAAI,CAACO,IAAI,CAACC,QAAQ,CAACR,SAAS,CAAC6B;KACzC;IAED,IAAI,CAACpC,eAAe,CAACqC,cAAc,CAAC;MAAE3B,EAAE,EAAE,IAAI,CAACG,QAAQ,CAACH,EAAG;MAAE4B,IAAI,EAAEH;IAAc,CAAE,CAAC,CAACxB,SAAS,CAAC,MAAK;MAClG,IAAI,CAACX,eAAe,CAACS,YAAY,CAAC;QAAEC,EAAE,EAAE,IAAI,CAACG,QAAQ,CAACH;MAAG,CAAE,CAAC,CAACC,SAAS,CAACC,CAAC,IAAG;QACzE,IAAIA,CAAC,CAACF,EAAE,IAAIyB,cAAc,CAACzB,EAAE,IAAIE,CAAC,CAACR,YAAY,IAAI+B,cAAc,CAAC/B,YAAY,IAAIQ,CAAC,CAACP,KAAK,IAAI8B,cAAc,CAAC9B,KAAK,IAC/GO,CAAC,CAACN,OAAO,IAAI6B,cAAc,CAAC7B,OAAO,IAAIM,CAAC,CAACL,SAAS,IAAI4B,cAAc,CAAC5B,SAAS,EAAE;UAChF,IAAI,CAACgC,SAAS,GAAG,IAAI;UACrB,IAAI,IAAI,CAACzB,IAAI,CAAC0B,KAAK,EAAE;YACnB,IAAI,CAACC,OAAO,GAAG,+BAA+B;YAC9CpB,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC;WAC7C,MACI,IAAI,IAAI,CAACR,IAAI,CAAC0B,KAAK,IAAI,CAAC,IAAI,CAAC1B,IAAI,CAAC4B,OAAO,IAAI,CAAC,IAAI,CAAC5B,IAAI,CAAC6B,KAAK,EAAE;YAClE,IAAI,CAACF,OAAO,GAAG,iBAAiB;YAChCpB,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;;UAEhC;UACA;UACA,IAAI,CAACpB,MAAM,CAACkB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;;MAExC,CAAC,CAAC;IACJ,CAAC,CAAC;EAEJ;EAEAwB,cAAc,CAACxC,YAAoB;IACjC,IAAI,CAAC2B,sBAAsB,GAAG,EAAE;IAChC,IAAI,IAAI,CAAClB,QAAQ,CAACT,YAAY,EAAEyC,WAAW,EAAE,CAACC,IAAI,EAAE,IAAI1C,YAAY,CAACyC,WAAW,EAAE,CAACC,IAAI,EAAE,EAAE;MACzF,IAAIC,aAAa,GAAG,IAAI,CAAClB,YAAY,CAACmB,MAAM,CAACpC,CAAC,IAAIA,CAAC,CAACR,YAAY,EAAEyC,WAAW,EAAE,CAACC,IAAI,EAAE,IAAI1C,YAAY,CAACyC,WAAW,EAAE,CAACC,IAAI,EAAE,CAAC;MAC5H,IAAIC,aAAa,CAACE,MAAM,GAAG,CAAC,EAAE;QAC5B,IAAI,CAAClB,sBAAsB,GAAG,IAAI,CAACC,qBAAqB;;;EAG9D;EAEAkB,eAAe,CAAC3C,SAAiB;IAC/B,IAAI,CAAC0B,qBAAqB,GAAG,EAAE;IAC/B,IAAI,IAAI,CAACpB,QAAQ,CAACN,SAAS,EAAEsC,WAAW,EAAE,CAACC,IAAI,EAAE,IAAIvC,SAAS,CAACsC,WAAW,EAAE,CAACC,IAAI,EAAE,EAAE;MACnF,IAAIK,QAAQ,GAAG,IAAI,CAACtB,YAAY,CAACmB,MAAM,CAACI,CAAC,IAAIA,CAAC,CAAC7C,SAAS,EAAEsC,WAAW,EAAE,CAACC,IAAI,EAAE,IAAIvC,SAAS,CAACsC,WAAW,EAAE,CAACC,IAAI,EAAE,CAAC;MACjH,IAAIK,QAAQ,CAACF,MAAM,GAAG,CAAC,EAAE;QACvB,IAAI,CAAChB,qBAAqB,GAAG,IAAI,CAACC,sBAAsB;;;EAG9D;;SAtGWrC,oBAAoB;;mBAApBA,MAAoB;AAAA;;QAApBA,MAAoB;EAAAwD;EAAAC;EAAAC;EAAAC;IAAA;MCZjCC,yBAAG;MAAAA,mCAAmB;MAAAA,iBAAI","names":["AddCustomerComponent","constructor","activatedRoute","customerService","fb","router","group","customerName","email","address","shortCode","customerId","findCustomer","id","subscribe","c","customer","form","controls","setValue","handleError","err","status","navigate","console","log","statusText","ngOnInit","paramMap","p","get","searchCustomer","customerList","update","customerIdFromTemplate","customerAlreadyExists","shortCodeFromTemplate","shortCodeAlreadyExists","editedCustomer","value","updateCustomer","body","showToast","valid","message","touched","dirty","customerExists","toLowerCase","trim","customerFound","filter","length","shortCodeExists","skuFound","s","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\PC\\source\\repos\\Returns-ASP-project\\Returns-ASP-project\\ClientApp\\src\\app\\add-customer\\add-customer.component.ts","C:\\Users\\PC\\source\\repos\\Returns-ASP-project\\Returns-ASP-project\\ClientApp\\src\\app\\add-customer\\add-customer.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { CustomerRm } from '../api/models';\nimport { CustomerService } from '../api/services';\n\n@Component({\n  selector: 'app-add-customer',\n  templateUrl: './add-customer.component.html',\n  styleUrls: ['./add-customer.component.css']\n})\n\nexport class AddCustomerComponent implements OnInit {\n\n  constructor(private activatedRoute: ActivatedRoute, private customerService: CustomerService, private fb: FormBuilder,\n    private router: Router) { }\n  customerId = ''\n  customer: CustomerRm = {}\n  showToast = false\n  message = ''\n  customerAlreadyExists = 'Customer already exists'\n  customerIdFromTemplate = ''\n  customerList: CustomerRm[] = []\n  shortCodeFromTemplate = ''\n  shortCodeAlreadyExists = 'Short Code already exists'\n\n  form = this.fb.group({\n    customerName: [''],\n    email: [''],\n    address: [''],\n    shortCode: [''],\n  })\n\n  ngOnInit(): void {\n    this.activatedRoute.paramMap.subscribe(p => { this.findCustomer(p.get(\"customerId\")); console.log(this.customerId + ' ' + p.get(\"customerId\")) })\n    this.customerService.searchCustomer().subscribe(c => this.customerList = c)\n  }\n\n  private findCustomer = (customerId: string | null) => {\n    this.customerId = customerId ?? 'not passed'\n\n    this.customerService.findCustomer({ id: customerId! }).subscribe(c => {\n      this.customer = c\n      this.form.controls.customerName.setValue(c.customerName!)\n      this.form.controls.email.setValue(c.email!)\n      this.form.controls.address.setValue(c.address!)\n      this.form.controls.shortCode.setValue(c.shortCode!)\n    }, this.handleError)\n  }\n\n  private handleError = (err: any) => {\n\n    if (err.status == 404) {\n      this.router.navigate(['/customers'])\n    }\n\n    console.log(\"Response Error. Status: \", err.status)\n    console.log(\"Response Error. Status: \", err.statusText)\n    console.log(err);\n  }\n\n  update() {\n    if (this.customerIdFromTemplate == this.customerAlreadyExists || this.shortCodeFromTemplate == this.shortCodeAlreadyExists) {\n      return\n    }\n\n    let editedCustomer: CustomerRm = {\n      id: this.customer.id,\n      customerName: this.form.controls.customerName.value,\n      email: this.form.controls.email.value,\n      address: this.form.controls.address.value,\n      shortCode: this.form.controls.shortCode.value\n    }\n\n    this.customerService.updateCustomer({ id: this.customer.id!, body: editedCustomer }).subscribe(() => {\n      this.customerService.findCustomer({ id: this.customer.id! }).subscribe(c => {\n        if (c.id == editedCustomer.id && c.customerName == editedCustomer.customerName && c.email == editedCustomer.email &&\n          c.address == editedCustomer.address && c.shortCode == editedCustomer.shortCode) {\n          this.showToast = true\n          if (this.form.valid) {\n            this.message = 'Customer updated successfully'\n            console.log('Customer updated successfully')\n          }\n          else if (this.form.valid && !this.form.touched && !this.form.dirty) {\n            this.message = 'Nothing updated'\n            console.log('Nothing updated')\n          }\n          //this.appService.setMessage(this.message);\n          //this.appService.showToast(this.showToast)\n          this.router.navigate(['/customers'])\n        }\n      })\n    })\n\n  }\n\n  customerExists(customerName: string) {\n    this.customerIdFromTemplate = ''\n    if (this.customer.customerName?.toLowerCase().trim() != customerName.toLowerCase().trim()) {\n      let customerFound = this.customerList.filter(c => c.customerName?.toLowerCase().trim() == customerName.toLowerCase().trim())\n      if (customerFound.length > 0) {\n        this.customerIdFromTemplate = this.customerAlreadyExists\n      }\n    }\n  }\n\n  shortCodeExists(shortCode: string) {\n    this.shortCodeFromTemplate = ''\n    if (this.customer.shortCode?.toLowerCase().trim() != shortCode.toLowerCase().trim()) {\n      let skuFound = this.customerList.filter(s => s.shortCode?.toLowerCase().trim() == shortCode.toLowerCase().trim())\n      if (skuFound.length > 0) {\n        this.shortCodeFromTemplate = this.shortCodeAlreadyExists\n      }\n    }\n  }\n\n}\n","<p>add-customer works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}