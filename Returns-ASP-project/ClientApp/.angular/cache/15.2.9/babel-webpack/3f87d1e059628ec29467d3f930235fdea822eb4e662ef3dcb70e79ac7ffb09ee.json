{"ast":null,"code":"var _class;\n/* tslint:disable */\n/* eslint-disable */\nimport { HttpResponse } from '@angular/common/http';\nimport { filter, map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class ProductService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `searchProduct()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchProduct$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchProduct$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ProductService.SearchProductPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchProduct$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchProduct$Plain(params, context) {\n    return this.searchProduct$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchProduct()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchProduct$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ProductService.SearchProductPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchProduct$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchProduct(params, context) {\n    return this.searchProduct$Response(params, context).pipe(map(r => r.body));\n  }\n}\n_class = ProductService;\n_class.SearchProductPath = '/Product';\n_class.ɵfac = function ProductService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAAA;AACA;AACA,SAAkCA,YAAY,QAAQ,sBAAsB;AAG5E,SAASC,MAAM,EAAEC,GAAG,QAAQ,gBAAgB;AAE5C,SAASC,WAAW,QAAQ,iBAAiB;AAG7C,SAASC,cAAc,QAAQ,oBAAoB;;;;AAKnD,OAAM,MAAOC,cAAe,SAAQF,WAAW;EAC7CG,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,4BAA4B,CAC1BC,MACC,EACDC,OAAqB;IAErB,MAAMC,EAAE,GAAG,IAAIR,cAAc,CAAC,IAAI,CAACS,OAAO,EAAER,cAAc,CAACS,iBAAiB,EAAE,KAAK,CAAC;IACpF,IAAIJ,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACF,IAAI,CAACO,OAAO,CACtBH,EAAE,CAACI,KAAK,CAAC;MAAEC,YAAY,EAAE,MAAM;MAAEC,MAAM,EAAE,YAAY;MAAEP;IAAO,CAAE,CAAC,CAClE,CAACQ,IAAI,CACJlB,MAAM,CAAEmB,CAAM,IAA6BA,CAAC,YAAYpB,YAAY,CAAC,EACrEE,GAAG,CAAEkB,CAAoB,IAAI;MAC3B,OAAOA,CAAyC;IAClD,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAC,mBAAmB,CACjBX,MACC,EACDC,OAAqB;IAErB,OAAO,IAAI,CAACF,4BAA4B,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACQ,IAAI,CAC5DjB,GAAG,CAAEkB,CAAuC,IAAuBA,CAAC,CAACE,IAAI,CAAC,CAC3E;EACH;EAEA;;;;;;EAMAC,sBAAsB,CACpBb,MACC,EACDC,OAAqB;IAErB,MAAMC,EAAE,GAAG,IAAIR,cAAc,CAAC,IAAI,CAACS,OAAO,EAAER,cAAc,CAACS,iBAAiB,EAAE,KAAK,CAAC;IACpF,IAAIJ,MAAM,EAAE;IAGZ,OAAO,IAAI,CAACF,IAAI,CAACO,OAAO,CACtBH,EAAE,CAACI,KAAK,CAAC;MAAEC,YAAY,EAAE,MAAM;MAAEC,MAAM,EAAE,WAAW;MAAEP;IAAO,CAAE,CAAC,CACjE,CAACQ,IAAI,CACJlB,MAAM,CAAEmB,CAAM,IAA6BA,CAAC,YAAYpB,YAAY,CAAC,EACrEE,GAAG,CAAEkB,CAAoB,IAAI;MAC3B,OAAOA,CAAyC;IAClD,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAI,aAAa,CACXd,MACC,EACDC,OAAqB;IAErB,OAAO,IAAI,CAACY,sBAAsB,CAACb,MAAM,EAAEC,OAAO,CAAC,CAACQ,IAAI,CACtDjB,GAAG,CAAEkB,CAAuC,IAAuBA,CAAC,CAACE,IAAI,CAAC,CAC3E;EACH;;SAxFWjB,cAAe;AAMV,wBAAiB,GAAG,UAAU;;mBANnCA,MAAc;AAAA;;SAAdA,MAAc;EAAAoB,SAAdpB,MAAc;EAAAqB,YADD;AAAM","names":["HttpResponse","filter","map","BaseService","RequestBuilder","ProductService","constructor","config","http","searchProduct$Plain$Response","params","context","rb","rootUrl","SearchProductPath","request","build","responseType","accept","pipe","r","searchProduct$Plain","body","searchProduct$Response","searchProduct","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Rowan\\source\\repos\\Returns-ASP-project\\Returns-ASP-project\\ClientApp\\src\\app\\api\\services\\product.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\n\r\nimport { ProductRm } from '../models/product-rm';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProductService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `searchProduct()` */\r\n  static readonly SearchProductPath = '/Product';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchProduct$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchProduct$Plain$Response(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<Array<ProductRm>>> {\r\n    const rb = new RequestBuilder(this.rootUrl, ProductService.SearchProductPath, 'get');\r\n    if (params) {\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<ProductRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchProduct$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchProduct$Plain(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<Array<ProductRm>> {\r\n    return this.searchProduct$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<ProductRm>>): Array<ProductRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchProduct()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchProduct$Response(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<Array<ProductRm>>> {\r\n    const rb = new RequestBuilder(this.rootUrl, ProductService.SearchProductPath, 'get');\r\n    if (params) {\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'json', accept: 'text/json', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<ProductRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchProduct$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchProduct(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<Array<ProductRm>> {\r\n    return this.searchProduct$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<ProductRm>>): Array<ProductRm> => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}