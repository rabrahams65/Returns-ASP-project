{"ast":null,"code":"var _class;\n/* tslint:disable */\n/* eslint-disable */\nimport { HttpResponse } from '@angular/common/http';\nimport { filter, map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class ProductService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `searchProduct()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchProduct$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchProduct$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ProductService.SearchProductPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchProduct$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchProduct$Plain(params, context) {\n    return this.searchProduct$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchProduct()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchProduct$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ProductService.SearchProductPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchProduct$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchProduct(params, context) {\n    return this.searchProduct$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `createProduct()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `createProduct$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  createProduct$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ProductService.CreateProductPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/*+json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `createProduct$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  createProduct$Plain(params, context) {\n    return this.createProduct$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `createProduct()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  createProduct$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ProductService.CreateProductPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/*+json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `createProduct$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  createProduct(params, context) {\n    return this.createProduct$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `deleteProduct()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteProduct()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  deleteProduct$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ProductService.DeleteProductPath, 'delete');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r.clone({\n        body: undefined\n      });\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `deleteProduct$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  deleteProduct(params, context) {\n    return this.deleteProduct$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findProduct()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findProduct$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findProduct$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ProductService.FindProductPath, 'get');\n    if (params) {\n      rb.path('id', params.id, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findProduct$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findProduct$Plain(params, context) {\n    return this.findProduct$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findProduct()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findProduct$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ProductService.FindProductPath, 'get');\n    if (params) {\n      rb.path('id', params.id, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findProduct$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findProduct(params, context) {\n    return this.findProduct$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `updateProduct()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `updateProduct()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  updateProduct$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ProductService.UpdateProductPath, 'put');\n    if (params) {\n      rb.path('id', params.id, {});\n      rb.body(params.body, 'application/*+json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r.clone({\n        body: undefined\n      });\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `updateProduct$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  updateProduct(params, context) {\n    return this.updateProduct$Response(params, context).pipe(map(r => r.body));\n  }\n}\n_class = ProductService;\n_class.SearchProductPath = '/Product';\n_class.CreateProductPath = '/Product';\n_class.DeleteProductPath = '/Product';\n_class.FindProductPath = '/Product/{id}';\n_class.UpdateProductPath = '/Product/{id}';\n_class.ɵfac = function ProductService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpResponse","filter","map","BaseService","RequestBuilder","ProductService","constructor","config","http","searchProduct$Plain$Response","params","context","rb","rootUrl","SearchProductPath","request","build","responseType","accept","pipe","r","searchProduct$Plain","body","searchProduct$Response","searchProduct","createProduct$Plain$Response","CreateProductPath","createProduct$Plain","createProduct$Response","createProduct","deleteProduct$Response","DeleteProductPath","query","id","clone","undefined","deleteProduct","findProduct$Plain$Response","FindProductPath","path","findProduct$Plain","findProduct$Response","findProduct","updateProduct$Response","UpdateProductPath","updateProduct","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\PC\\source\\repos\\Returns-ASP-project\\Returns-ASP-project\\ClientApp\\src\\app\\api\\services\\product.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\n\r\nimport { NewProductDto } from '../models/new-product-dto';\r\nimport { Product } from '../models/product';\r\nimport { ProductRm } from '../models/product-rm';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ProductService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `searchProduct()` */\r\n  static readonly SearchProductPath = '/Product';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchProduct$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchProduct$Plain$Response(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<Array<ProductRm>>> {\r\n    const rb = new RequestBuilder(this.rootUrl, ProductService.SearchProductPath, 'get');\r\n    if (params) {\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<ProductRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchProduct$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchProduct$Plain(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<Array<ProductRm>> {\r\n    return this.searchProduct$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<ProductRm>>): Array<ProductRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchProduct()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchProduct$Response(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<Array<ProductRm>>> {\r\n    const rb = new RequestBuilder(this.rootUrl, ProductService.SearchProductPath, 'get');\r\n    if (params) {\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'json', accept: 'text/json', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<ProductRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchProduct$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchProduct(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<Array<ProductRm>> {\r\n    return this.searchProduct$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<ProductRm>>): Array<ProductRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `createProduct()` */\r\n  static readonly CreateProductPath = '/Product';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `createProduct$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  createProduct$Plain$Response(\r\n    params?: {\r\n      body?: NewProductDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<NewProductDto>> {\r\n    const rb = new RequestBuilder(this.rootUrl, ProductService.CreateProductPath, 'post');\r\n    if (params) {\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<NewProductDto>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `createProduct$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  createProduct$Plain(\r\n    params?: {\r\n      body?: NewProductDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<NewProductDto> {\r\n    return this.createProduct$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<NewProductDto>): NewProductDto => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `createProduct()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  createProduct$Response(\r\n    params?: {\r\n      body?: NewProductDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<NewProductDto>> {\r\n    const rb = new RequestBuilder(this.rootUrl, ProductService.CreateProductPath, 'post');\r\n    if (params) {\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'json', accept: 'text/json', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<NewProductDto>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `createProduct$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  createProduct(\r\n    params?: {\r\n      body?: NewProductDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<NewProductDto> {\r\n    return this.createProduct$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<NewProductDto>): NewProductDto => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `deleteProduct()` */\r\n  static readonly DeleteProductPath = '/Product';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteProduct()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteProduct$Response(\r\n    params?: {\r\n      id?: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<void>> {\r\n    const rb = new RequestBuilder(this.rootUrl, ProductService.DeleteProductPath, 'delete');\r\n    if (params) {\r\n      rb.query('id', params.id, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: '*/*', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `deleteProduct$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteProduct(\r\n    params?: {\r\n      id?: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<void> {\r\n    return this.deleteProduct$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `findProduct()` */\r\n  static readonly FindProductPath = '/Product/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findProduct$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findProduct$Plain$Response(\r\n    params: {\r\n      id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<ProductRm>> {\r\n    const rb = new RequestBuilder(this.rootUrl, ProductService.FindProductPath, 'get');\r\n    if (params) {\r\n      rb.path('id', params.id, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<ProductRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findProduct$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findProduct$Plain(\r\n    params: {\r\n      id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<ProductRm> {\r\n    return this.findProduct$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<ProductRm>): ProductRm => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findProduct()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findProduct$Response(\r\n    params: {\r\n      id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<ProductRm>> {\r\n    const rb = new RequestBuilder(this.rootUrl, ProductService.FindProductPath, 'get');\r\n    if (params) {\r\n      rb.path('id', params.id, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'json', accept: 'text/json', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<ProductRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findProduct$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findProduct(\r\n    params: {\r\n      id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<ProductRm> {\r\n    return this.findProduct$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<ProductRm>): ProductRm => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `updateProduct()` */\r\n  static readonly UpdateProductPath = '/Product/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `updateProduct()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  updateProduct$Response(\r\n    params: {\r\n      id: string;\r\n      body?: Product\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<void>> {\r\n    const rb = new RequestBuilder(this.rootUrl, ProductService.UpdateProductPath, 'put');\r\n    if (params) {\r\n      rb.path('id', params.id, {});\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: '*/*', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `updateProduct$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  updateProduct(\r\n    params: {\r\n      id: string;\r\n      body?: Product\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<void> {\r\n    return this.updateProduct$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}