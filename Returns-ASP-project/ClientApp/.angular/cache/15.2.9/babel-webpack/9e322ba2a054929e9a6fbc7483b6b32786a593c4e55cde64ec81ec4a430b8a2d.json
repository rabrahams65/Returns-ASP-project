{"ast":null,"code":"var _class;\n/* tslint:disable */\n/* eslint-disable */\nimport { HttpResponse } from '@angular/common/http';\nimport { filter, map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class ReportService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `getReport()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getReport()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  getReport$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ReportService.GetReportPath, 'get');\n    if (params) {\n      rb.path('reportName', params.reportName, {});\n      rb.path('reportType', params.reportType, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r.clone({\n        body: undefined\n      });\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getReport$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  getReport(params, context) {\n    return this.getReport$Response(params, context).pipe(map(r => r.body));\n  }\n}\n_class = ReportService;\n_class.GetReportPath = '/{reportName}/{reportType}';\n_class.ɵfac = function ReportService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAAA;AACA;AACA,SAAkCA,YAAY,QAAQ,sBAAsB;AAG5E,SAASC,MAAM,EAAEC,GAAG,QAAQ,gBAAgB;AAE5C,SAASC,WAAW,QAAQ,iBAAiB;AAG7C,SAASC,cAAc,QAAQ,oBAAoB;;;;AAInD,OAAM,MAAOC,aAAc,SAAQF,WAAW;EAC5CG,YAAYC,MAAwB,EAAEC,IAAgB;IACpD,KAAK,CAACD,MAAM,EAAEC,IAAI,CAAC;EACrB;EAEA;;EAGA;;;;;;EAMAC,kBAAkB,CAChBC,MAGC,EACDC,OAAqB;IAErB,MAAMC,EAAE,GAAG,IAAIR,cAAc,CAAC,IAAI,CAACS,OAAO,EAAER,aAAa,CAACS,aAAa,EAAE,KAAK,CAAC;IAC/E,IAAIJ,MAAM,EAAE;MACVE,EAAE,CAACG,IAAI,CAAC,YAAY,EAAEL,MAAM,CAACM,UAAU,EAAE,EAAE,CAAC;MAC5CJ,EAAE,CAACG,IAAI,CAAC,YAAY,EAAEL,MAAM,CAACO,UAAU,EAAE,EAAE,CAAC;;IAG9C,OAAO,IAAI,CAACT,IAAI,CAACU,OAAO,CACtBN,EAAE,CAACO,KAAK,CAAC;MAAEC,YAAY,EAAE,MAAM;MAAEC,MAAM,EAAE,KAAK;MAAEV;IAAO,CAAE,CAAC,CAC3D,CAACW,IAAI,CACJrB,MAAM,CAAEsB,CAAM,IAA6BA,CAAC,YAAYvB,YAAY,CAAC,EACrEE,GAAG,CAAEqB,CAAoB,IAAI;MAC3B,OAAQA,CAAuB,CAACC,KAAK,CAAC;QAAEC,IAAI,EAAEC;MAAS,CAAE,CAA6B;IACxF,CAAC,CAAC,CACH;EACH;EAEA;;;;;;EAMAC,SAAS,CACPjB,MAGC,EACDC,OAAqB;IAErB,OAAO,IAAI,CAACF,kBAAkB,CAACC,MAAM,EAAEC,OAAO,CAAC,CAACW,IAAI,CAClDpB,GAAG,CAAEqB,CAA2B,IAAWA,CAAC,CAACE,IAAI,CAAC,CACnD;EACH;;SArDWpB,aAAc;AAMT,oBAAa,GAAG,4BAA4B;;mBANjDA,MAAa;AAAA;;SAAbA,MAAa;EAAAuB,SAAbvB,MAAa;EAAAwB,YADA;AAAM","names":["HttpResponse","filter","map","BaseService","RequestBuilder","ReportService","constructor","config","http","getReport$Response","params","context","rb","rootUrl","GetReportPath","path","reportName","reportType","request","build","responseType","accept","pipe","r","clone","body","undefined","getReport","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\PC\\source\\repos\\Returns-ASP-project\\Returns-ASP-project\\ClientApp\\src\\app\\api\\services\\report.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ReportService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `getReport()` */\r\n  static readonly GetReportPath = '/{reportName}/{reportType}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `getReport()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getReport$Response(\r\n    params: {\r\n      reportName: string;\r\n      reportType: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<void>> {\r\n    const rb = new RequestBuilder(this.rootUrl, ReportService.GetReportPath, 'get');\r\n    if (params) {\r\n      rb.path('reportName', params.reportName, {});\r\n      rb.path('reportType', params.reportType, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: '*/*', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `getReport$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  getReport(\r\n    params: {\r\n      reportName: string;\r\n      reportType: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<void> {\r\n    return this.getReport$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}