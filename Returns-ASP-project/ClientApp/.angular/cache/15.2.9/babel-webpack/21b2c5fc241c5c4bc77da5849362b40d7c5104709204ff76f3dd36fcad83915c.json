{"ast":null,"code":"var _class;\n/* tslint:disable */\n/* eslint-disable */\nimport { HttpResponse } from '@angular/common/http';\nimport { filter, map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class UserService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `registerUser()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `registerUser()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  registerUser$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, UserService.RegisterUserPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/*+json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r.clone({\n        body: undefined\n      });\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `registerUser$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  registerUser(params, context) {\n    return this.registerUser$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findUser()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findUser$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findUser$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, UserService.FindUserPath, 'get');\n    if (params) {\n      rb.path('email', params.email, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findUser$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findUser$Plain(params, context) {\n    return this.findUser$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findUser()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findUser$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, UserService.FindUserPath, 'get');\n    if (params) {\n      rb.path('email', params.email, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findUser$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findUser(params, context) {\n    return this.findUser$Response(params, context).pipe(map(r => r.body));\n  }\n}\n_class = UserService;\n_class.RegisterUserPath = '/User';\n_class.FindUserPath = '/User/{email}';\n_class.ɵfac = function UserService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpResponse","filter","map","BaseService","RequestBuilder","UserService","constructor","config","http","registerUser$Response","params","context","rb","rootUrl","RegisterUserPath","body","request","build","responseType","accept","pipe","r","clone","undefined","registerUser","findUser$Plain$Response","FindUserPath","path","email","findUser$Plain","findUser$Response","findUser","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Rowan\\source\\repos\\Returns-ASP-project\\Returns-ASP-project\\ClientApp\\src\\app\\api\\services\\user.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\n\r\nimport { NewUserDto } from '../models/new-user-dto';\r\nimport { UserRm } from '../models/user-rm';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class UserService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `registerUser()` */\r\n  static readonly RegisterUserPath = '/User';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `registerUser()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  registerUser$Response(\r\n    params?: {\r\n      body?: NewUserDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<void>> {\r\n    const rb = new RequestBuilder(this.rootUrl, UserService.RegisterUserPath, 'post');\r\n    if (params) {\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: '*/*', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `registerUser$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  registerUser(\r\n    params?: {\r\n      body?: NewUserDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<void> {\r\n    return this.registerUser$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `findUser()` */\r\n  static readonly FindUserPath = '/User/{email}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findUser$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findUser$Plain$Response(\r\n    params: {\r\n      email: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<UserRm>> {\r\n    const rb = new RequestBuilder(this.rootUrl, UserService.FindUserPath, 'get');\r\n    if (params) {\r\n      rb.path('email', params.email, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<UserRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findUser$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findUser$Plain(\r\n    params: {\r\n      email: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<UserRm> {\r\n    return this.findUser$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<UserRm>): UserRm => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findUser()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findUser$Response(\r\n    params: {\r\n      email: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<UserRm>> {\r\n    const rb = new RequestBuilder(this.rootUrl, UserService.FindUserPath, 'get');\r\n    if (params) {\r\n      rb.path('email', params.email, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'json', accept: 'text/json', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<UserRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findUser$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findUser(\r\n    params: {\r\n      email: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<UserRm> {\r\n    return this.findUser$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<UserRm>): UserRm => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}