{"ast":null,"code":"var _class;\n/* tslint:disable */\n/* eslint-disable */\nimport { HttpResponse } from '@angular/common/http';\nimport { filter, map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class ReturnService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `searchReturn()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchReturn$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchReturn$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ReturnService.SearchReturnPath, 'get');\n    if (params) {\n      rb.query('Page', params.Page, {});\n      rb.query('Size', params.Size, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchReturn$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchReturn$Plain(params, context) {\n    return this.searchReturn$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchReturn()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchReturn$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ReturnService.SearchReturnPath, 'get');\n    if (params) {\n      rb.query('Page', params.Page, {});\n      rb.query('Size', params.Size, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchReturn$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchReturn(params, context) {\n    return this.searchReturn$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `createReturnReturn()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `createReturnReturn$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  createReturnReturn$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ReturnService.CreateReturnReturnPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/*+json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `createReturnReturn$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  createReturnReturn$Plain(params, context) {\n    return this.createReturnReturn$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `createReturnReturn()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  createReturnReturn$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ReturnService.CreateReturnReturnPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/*+json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `createReturnReturn$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  createReturnReturn(params, context) {\n    return this.createReturnReturn$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `deleteReturnReturn()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteReturnReturn()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  deleteReturnReturn$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ReturnService.DeleteReturnReturnPath, 'delete');\n    if (params) {\n      rb.body(params.body, 'application/*+json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r.clone({\n        body: undefined\n      });\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `deleteReturnReturn$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  deleteReturnReturn(params, context) {\n    return this.deleteReturnReturn$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findReturn()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findReturn$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findReturn$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ReturnService.FindReturnPath, 'get');\n    if (params) {\n      rb.path('id', params.id, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findReturn$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findReturn$Plain(params, context) {\n    return this.findReturn$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findReturn()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findReturn$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ReturnService.FindReturnPath, 'get');\n    if (params) {\n      rb.path('id', params.id, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findReturn$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findReturn(params, context) {\n    return this.findReturn$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `updateReturnReturn()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `updateReturnReturn()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  updateReturnReturn$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, ReturnService.UpdateReturnReturnPath, 'put');\n    if (params) {\n      rb.path('id', params.id, {});\n      rb.body(params.body, 'application/*+json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r.clone({\n        body: undefined\n      });\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `updateReturnReturn$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  updateReturnReturn(params, context) {\n    return this.updateReturnReturn$Response(params, context).pipe(map(r => r.body));\n  }\n}\n_class = ReturnService;\n_class.SearchReturnPath = '/Return';\n_class.CreateReturnReturnPath = '/Return';\n_class.DeleteReturnReturnPath = '/Return';\n_class.FindReturnPath = '/Return/{id}';\n_class.UpdateReturnReturnPath = '/Return/{id}';\n_class.ɵfac = function ReturnService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpResponse","filter","map","BaseService","RequestBuilder","ReturnService","constructor","config","http","searchReturn$Plain$Response","params","context","rb","rootUrl","SearchReturnPath","query","Page","Size","request","build","responseType","accept","pipe","r","searchReturn$Plain","body","searchReturn$Response","searchReturn","createReturnReturn$Plain$Response","CreateReturnReturnPath","createReturnReturn$Plain","createReturnReturn$Response","createReturnReturn","deleteReturnReturn$Response","DeleteReturnReturnPath","clone","undefined","deleteReturnReturn","findReturn$Plain$Response","FindReturnPath","path","id","findReturn$Plain","findReturn$Response","findReturn","updateReturnReturn$Response","UpdateReturnReturnPath","updateReturnReturn","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Rowan\\source\\repos\\Returns-ASP-project\\Returns-ASP-project\\ClientApp\\src\\app\\api\\services\\return.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\n\r\nimport { ReturnDto } from '../models/return-dto';\r\nimport { ReturnRm } from '../models/return-rm';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ReturnService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `searchReturn()` */\r\n  static readonly SearchReturnPath = '/Return';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchReturn$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchReturn$Plain$Response(\r\n    params?: {\r\n      Page?: number;\r\n      Size?: number;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<Array<ReturnRm>>> {\r\n    const rb = new RequestBuilder(this.rootUrl, ReturnService.SearchReturnPath, 'get');\r\n    if (params) {\r\n      rb.query('Page', params.Page, {});\r\n      rb.query('Size', params.Size, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<ReturnRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchReturn$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchReturn$Plain(\r\n    params?: {\r\n      Page?: number;\r\n      Size?: number;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<Array<ReturnRm>> {\r\n    return this.searchReturn$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<ReturnRm>>): Array<ReturnRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchReturn()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchReturn$Response(\r\n    params?: {\r\n      Page?: number;\r\n      Size?: number;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<Array<ReturnRm>>> {\r\n    const rb = new RequestBuilder(this.rootUrl, ReturnService.SearchReturnPath, 'get');\r\n    if (params) {\r\n      rb.query('Page', params.Page, {});\r\n      rb.query('Size', params.Size, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'json', accept: 'text/json', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<ReturnRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchReturn$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchReturn(\r\n    params?: {\r\n      Page?: number;\r\n      Size?: number;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<Array<ReturnRm>> {\r\n    return this.searchReturn$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<ReturnRm>>): Array<ReturnRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `createReturnReturn()` */\r\n  static readonly CreateReturnReturnPath = '/Return';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `createReturnReturn$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  createReturnReturn$Plain$Response(\r\n    params?: {\r\n      body?: ReturnDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<ReturnRm>> {\r\n    const rb = new RequestBuilder(this.rootUrl, ReturnService.CreateReturnReturnPath, 'post');\r\n    if (params) {\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<ReturnRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `createReturnReturn$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  createReturnReturn$Plain(\r\n    params?: {\r\n      body?: ReturnDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<ReturnRm> {\r\n    return this.createReturnReturn$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<ReturnRm>): ReturnRm => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `createReturnReturn()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  createReturnReturn$Response(\r\n    params?: {\r\n      body?: ReturnDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<ReturnRm>> {\r\n    const rb = new RequestBuilder(this.rootUrl, ReturnService.CreateReturnReturnPath, 'post');\r\n    if (params) {\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'json', accept: 'text/json', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<ReturnRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `createReturnReturn$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  createReturnReturn(\r\n    params?: {\r\n      body?: ReturnDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<ReturnRm> {\r\n    return this.createReturnReturn$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<ReturnRm>): ReturnRm => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `deleteReturnReturn()` */\r\n  static readonly DeleteReturnReturnPath = '/Return';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteReturnReturn()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  deleteReturnReturn$Response(\r\n    params?: {\r\n      body?: ReturnDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<void>> {\r\n    const rb = new RequestBuilder(this.rootUrl, ReturnService.DeleteReturnReturnPath, 'delete');\r\n    if (params) {\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: '*/*', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `deleteReturnReturn$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  deleteReturnReturn(\r\n    params?: {\r\n      body?: ReturnDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<void> {\r\n    return this.deleteReturnReturn$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `findReturn()` */\r\n  static readonly FindReturnPath = '/Return/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findReturn$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findReturn$Plain$Response(\r\n    params: {\r\n      id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<ReturnRm>> {\r\n    const rb = new RequestBuilder(this.rootUrl, ReturnService.FindReturnPath, 'get');\r\n    if (params) {\r\n      rb.path('id', params.id, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<ReturnRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findReturn$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findReturn$Plain(\r\n    params: {\r\n      id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<ReturnRm> {\r\n    return this.findReturn$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<ReturnRm>): ReturnRm => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findReturn()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findReturn$Response(\r\n    params: {\r\n      id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<ReturnRm>> {\r\n    const rb = new RequestBuilder(this.rootUrl, ReturnService.FindReturnPath, 'get');\r\n    if (params) {\r\n      rb.path('id', params.id, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'json', accept: 'text/json', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<ReturnRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findReturn$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findReturn(\r\n    params: {\r\n      id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<ReturnRm> {\r\n    return this.findReturn$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<ReturnRm>): ReturnRm => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `updateReturnReturn()` */\r\n  static readonly UpdateReturnReturnPath = '/Return/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `updateReturnReturn()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  updateReturnReturn$Response(\r\n    params: {\r\n      id: string;\r\n      body?: ReturnRm\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<void>> {\r\n    const rb = new RequestBuilder(this.rootUrl, ReturnService.UpdateReturnReturnPath, 'put');\r\n    if (params) {\r\n      rb.path('id', params.id, {});\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: '*/*', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `updateReturnReturn$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  updateReturnReturn(\r\n    params: {\r\n      id: string;\r\n      body?: ReturnRm\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<void> {\r\n    return this.updateReturnReturn$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}