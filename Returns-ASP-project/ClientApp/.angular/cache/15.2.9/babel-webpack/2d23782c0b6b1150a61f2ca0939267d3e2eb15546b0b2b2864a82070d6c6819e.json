{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { ModalDismissReasons } from '@ng-bootstrap/ng-bootstrap';\nlet AddNewComponent = class AddNewComponent {\n  constructor(fb, returnService, router, appService, userService, customerService, productService, faultService, ownerService, authService, modalService) {\n    this.fb = fb;\n    this.returnService = returnService;\n    this.router = router;\n    this.appService = appService;\n    this.userService = userService;\n    this.customerService = customerService;\n    this.productService = productService;\n    this.faultService = faultService;\n    this.ownerService = ownerService;\n    this.authService = authService;\n    this.modalService = modalService;\n    this.batchDateToggle = false;\n    this.closeResult = '';\n    this.customer = {};\n    this.product = {};\n    this.fault = {};\n    this.owner = {};\n    this.custIdFromTemplate = '';\n    this.prodIdFromTemplate = '';\n    this.faultIdFromTemplate = '';\n    this.ownerIdFromTemplate = '';\n    this.customerList = [];\n    this.productList = [];\n    this.faultList = [];\n    this.ownerList = [];\n    this.notFound = 'Not Found';\n    this.notLoaded = 'Not Loaded';\n    this.formInvalid = '';\n    this.userId = this.notLoaded;\n    this.getUserId = userId => {\n      this.userId = userId;\n    };\n    this.form = this.fb.group({\n      customer: ['', Validators.nullValidator],\n      product: ['', Validators.nullValidator],\n      qtyOnDoc: [0],\n      qtyReturned: [0],\n      batchDate: [],\n      owner: [''],\n      fault: [''],\n      docNo: ['', Validators.required],\n      docDate: [, Validators.required],\n      resolved: [],\n      comment: ['']\n    });\n    this.showToast = false;\n    this.message = 'Something went wrong';\n    this.handleError = err => {\n      if (err.status == 404) {\n        this.router.navigate(['/search-returns']);\n      }\n      console.log(\"Response Error. Status: \", err.status);\n      console.log(\"Response Error. Status: \", err.statusText);\n      console.log(err);\n    };\n    //modals\n    //Modal Forms\n    this.newCustomerForm = this.fb.group({\n      customerName: [''],\n      email: [''],\n      address: [''],\n      shortCode: ['']\n    });\n    //customer Modal\n    //modal extensions\n    this.customerIdFromTemplate = '';\n    this.customerShortCodeFromTemplate = '';\n    this.customerAlreadyExists = 'Customer already exists';\n    this.customerShortCodeAlreadyExists = 'Short code already exists';\n  }\n  ngOnInit() {\n    this.userService.findUser({\n      email: this.authService.currentUser?.email\n    }).subscribe(u => {\n      this.getUserId(u.id);\n      console.log('The user id in the oninit subscribe call is: ' + this.userId);\n    });\n    this.customerService.searchCustomer().subscribe(c => this.customerList = c, this.handleError);\n    this.productService.searchProduct().subscribe(p => this.productList = p, this.handleError);\n    this.faultService.searchFault().subscribe(f => this.faultList = f, this.handleError);\n    this.ownerService.searchOwner().subscribe(o => this.ownerList = o, this.handleError);\n  }\n  //Gets the id and name of the model in the search criteria\n  getModel(modelName, type) {\n    let modelFound = [];\n    //Get the type of model\n    if (type == 'customerType') {\n      let customerFound = this.customerList.filter(c => c.customerName == modelName);\n      console.log(customerFound.length);\n      if (customerFound.length > 0) {\n        customerFound.map(c => {\n          this.custIdFromTemplate = c.id;\n          this.customer.customerName = c.customerName;\n        });\n      } else {\n        this.custIdFromTemplate = this.notFound;\n      }\n    }\n    if (type == 'productType') {\n      let productFound = this.productList.filter(p => p.productName == modelName);\n      if (productFound.length > 0) {\n        productFound.map(p => {\n          this.prodIdFromTemplate = p.id;\n          this.product.productName = p.productName;\n        });\n      } else {\n        this.prodIdFromTemplate = this.notFound;\n      }\n    }\n    if (type == 'faultType') {\n      let faultFound = this.faultList.filter(f => f.name == modelName);\n      if (faultFound.length > 0) {\n        faultFound.map(f => {\n          this.faultIdFromTemplate = f.id;\n          this.fault.name = f.name;\n        });\n      } else {\n        this.faultIdFromTemplate = this.notFound;\n      }\n    }\n    if (type == 'ownerType') {\n      let ownerFound = this.ownerList.filter(o => o.firstName == modelName);\n      if (ownerFound.length > 0) {\n        ownerFound.map(o => {\n          this.ownerIdFromTemplate = o.id;\n          this.owner.firstName = o.firstName;\n        });\n      } else {\n        this.ownerIdFromTemplate = this.notFound;\n      }\n    }\n  }\n  toggleBatch() {\n    this.batchDateToggle = !this.batchDateToggle;\n  }\n  save() {\n    if (this.form.invalid) {\n      this.form.markAllAsTouched();\n      console.log(\"Form is invalid\");\n      console.log(\"Customer valid?: \" + this.getCustomer.valid);\n      console.log(\"Product valid?: \" + this.getProduct.valid);\n      console.log(\"Fault valid?: \" + this.getFault.valid);\n      console.log(\"Owner valid?: \" + this.getOwner.valid);\n      console.log(\"User id is: \" + this.userId);\n      return;\n    }\n    this.message = 'Return Saved';\n    this.showToast = true;\n    const createdReturn = {\n      docDate: this.form.get('docDate')?.value,\n      customerId: this.custIdFromTemplate,\n      productId: this.prodIdFromTemplate,\n      qtyOnDoc: this.form.get('qtyOnDoc')?.value,\n      batchDate: this.form.get('batchDate')?.value,\n      ownerId: this.ownerIdFromTemplate,\n      faultId: this.faultIdFromTemplate,\n      docNo: this.form.get('docNo')?.value,\n      qtyReturned: this.form.get('qtyReturned')?.value,\n      resolved: JSON.parse(this.form.controls.resolved.value),\n      comment: this.form.get('comment')?.value,\n      userId: this.userId\n    };\n    this.returnService.createReturnReturn({\n      body: createdReturn\n    }).subscribe(_ => {\n      this.appService.setMessage(this.message);\n      this.appService.showToast(this.showToast);\n    }, this.handleError);\n    this.router.navigate(['/search-returns']);\n  }\n  //getters\n  get getDocDate() {\n    return this.form.controls.docDate;\n  }\n  get getCustomer() {\n    return this.form.controls.customer;\n  }\n  get getProduct() {\n    return this.form.controls.product;\n  }\n  get getQtyOnDoc() {\n    return this.form.controls.qtyOnDoc;\n  }\n  get getBatchDate() {\n    return this.form.controls.batchDate;\n  }\n  get getOwner() {\n    return this.form.controls.owner;\n  }\n  get getFault() {\n    return this.form.controls.fault;\n  }\n  get getDocNo() {\n    return this.form.controls.docNo;\n  }\n  get getQtyReturned() {\n    return this.form.controls.qtyReturned;\n  }\n  get getResolved() {\n    return this.form.controls.resolved;\n  }\n  get getComment() {\n    return this.form.controls.comment;\n  }\n  //\n  //customer Modal\n  openCustomerModal(content) {\n    this.newCustomerForm.reset();\n    this.customerIdFromTemplate = '';\n    this.customerShortCodeFromTemplate = '';\n    this.modalService.open(content, {\n      ariaLabelledBy: 'modal-basic-title'\n    }).result.then(result => {\n      this.closeResult = `Closed with: ${result}`;\n      this.saveNewCustomer();\n    }, reason => {\n      this.closeResult = `Dismissed ${this.getDismissReason(reason)}`;\n    });\n  }\n  getDismissReason(reason) {\n    if (reason === ModalDismissReasons.ESC) {\n      return 'by pressing ESC';\n    } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {\n      return 'by clicking on a backdrop';\n    } else {\n      return `with: ${reason}`;\n    }\n  }\n  saveNewCustomer() {\n    if (this.customerIdFromTemplate == this.customerAlreadyExists || this.customerShortCodeFromTemplate == this.customerShortCodeAlreadyExists) {\n      return;\n    }\n    let newCustomer = {\n      customerName: this.newCustomerForm.controls.customerName.value,\n      email: this.newCustomerForm.controls.email.value,\n      address: this.newCustomerForm.controls.address.value,\n      shortCode: this.newCustomerForm.controls.shortCode.value\n    };\n    this.customerService.createCustomer({\n      body: newCustomer\n    }).subscribe(() => {\n      this.showToast = true;\n      if (this.form.valid) {\n        this.message = 'Customer added successfully';\n        console.log('Customer added successfully');\n        this.customerList = [];\n        this.customerService.searchCustomer().subscribe(c => this.customerList = c, this.handleError);\n      } else if (this.form.valid && !this.form.touched && !this.form.dirty) {\n        this.message = 'Nothing added';\n        console.log('Nothing added');\n      }\n      //this.appService.setMessage(this.message);\n      //this.appService.showToast(this.showToast)\n      console.log('customer control raw value: ' + this.form.controls.customer.value);\n    });\n  }\n  customerExists(customerName) {\n    this.customerIdFromTemplate = '';\n    if (this.customer.customerName?.toLowerCase().trim() != customerName.toLowerCase().trim()) {\n      let customerFound = this.customerList.filter(c => c.customerName?.toLowerCase().trim() == customerName.toLowerCase().trim());\n      if (customerFound.length > 0) {\n        this.customerIdFromTemplate = this.customerAlreadyExists;\n      }\n    }\n  }\n  customerShortCodeExists(shortCode) {\n    this.customerShortCodeFromTemplate = '';\n    if (this.customer.shortCode?.toLowerCase().trim() != shortCode.toLowerCase().trim()) {\n      let skuFound = this.customerList.filter(s => s.shortCode?.toLowerCase().trim() == shortCode.toLowerCase().trim());\n      if (skuFound.length > 0) {\n        this.customerShortCodeFromTemplate = this.customerShortCodeAlreadyExists;\n      }\n    }\n  }\n};\nAddNewComponent = __decorate([Component({\n  selector: 'app-add-new',\n  templateUrl: './add-new.component.html',\n  styleUrls: ['./add-new.component.css']\n})], AddNewComponent);\nexport { AddNewComponent };","map":{"version":3,"mappings":"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","names":["Component","Validators","ModalDismissReasons","AddNewComponent","constructor","fb","returnService","router","appService","userService","customerService","productService","faultService","ownerService","authService","modalService","notLoaded","userId","group","customer","nullValidator","product","qtyOnDoc","qtyReturned","batchDate","owner","fault","docNo","required","docDate","resolved","comment","err","status","navigate","console","log","statusText","customerName","email","address","shortCode","ngOnInit","findUser","currentUser","subscribe","u","getUserId","id","searchCustomer","c","customerList","handleError","searchProduct","p","productList","searchFault","f","faultList","searchOwner","o","ownerList","getModel","modelName","type","modelFound","customerFound","filter","length","map","custIdFromTemplate","notFound","productFound","productName","prodIdFromTemplate","faultFound","name","faultIdFromTemplate","ownerFound","firstName","ownerIdFromTemplate","toggleBatch","batchDateToggle","save","form","invalid","markAllAsTouched","getCustomer","valid","getProduct","getFault","getOwner","message","showToast","createdReturn","get","value","customerId","productId","ownerId","faultId","JSON","parse","controls","createReturnReturn","body","_","setMessage","getDocDate","getQtyOnDoc","getBatchDate","getDocNo","getQtyReturned","getResolved","getComment","openCustomerModal","content","newCustomerForm","reset","customerIdFromTemplate","customerShortCodeFromTemplate","open","ariaLabelledBy","result","then","closeResult","saveNewCustomer","reason","getDismissReason","ESC","BACKDROP_CLICK","customerAlreadyExists","customerShortCodeAlreadyExists","newCustomer","createCustomer","touched","dirty","customerExists","toLowerCase","trim","customerShortCodeExists","skuFound","s","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\PC\\source\\repos\\Returns-ASP-project\\Returns-ASP-project\\ClientApp\\src\\app\\add-new\\add-new.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { debounceTime, distinctUntilChanged, filter, map, Observable, OperatorFunction } from 'rxjs';\r\nimport { CustomerRm, FaultRm, OwnerRm, ProductRm, ReturnDto, ReturnRm } from '../api/models';\r\nimport { CustomerService, FaultService, OwnerService, ProductService, ReturnService, UserService } from '../api/services';\r\nimport { AppService } from '../app.service';\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { ModalDismissReasons, NgbModal } from '@ng-bootstrap/ng-bootstrap';\r\n\n@Component({\n  selector: 'app-add-new',\n  templateUrl: './add-new.component.html',\n  styleUrls: ['./add-new.component.css']\n})\nexport class AddNewComponent implements OnInit {\n\n  batchDateToggle = false;\n  closeResult = '';\n\n  constructor(private fb: FormBuilder, private returnService: ReturnService, private router: Router, private appService: AppService, private userService: UserService,\r\n    private customerService: CustomerService, private productService: ProductService, private faultService: FaultService, private ownerService: OwnerService,\n    private authService: AuthService, private modalService: NgbModal ) { }\n\n  customer: CustomerRm = {}\r\n  product: ProductRm = {}\r\n  fault: FaultRm = {}\r\n  owner: OwnerRm = {}\r\n  custIdFromTemplate = ''\r\n  prodIdFromTemplate = ''\r\n  faultIdFromTemplate = ''\r\n  ownerIdFromTemplate = ''\r\n\r\n  customerList: CustomerRm[] = []\r\n  productList: ProductRm[] = []\r\n  faultList: FaultRm[] = []\r\n  ownerList: OwnerRm[] = []\n\n  notFound = 'Not Found'\r\n  notLoaded = 'Not Loaded'\r\n  formInvalid = ''\n  userId = this.notLoaded\n\n  ngOnInit(): void {\n    this.userService.findUser({ email: this.authService.currentUser?.email! }).subscribe(u => {\r\n      this.getUserId(u.id!); console.log('The user id in the oninit subscribe call is: ' + this.userId)\r\n    })\n    this.customerService.searchCustomer().subscribe(c => this.customerList = c, this.handleError)\n    this.productService.searchProduct().subscribe(p => this.productList = p, this.handleError)\n    this.faultService.searchFault().subscribe(f => this.faultList = f, this.handleError)\n    this.ownerService.searchOwner().subscribe(o => this.ownerList = o, this.handleError)\n  }\n\n  private getUserId = (userId: string) => {\r\n    this.userId = userId\r\n  }\n\n  form = this.fb.group({\r\n    customer: ['', Validators.nullValidator],\r\n    product: ['', Validators.nullValidator],\r\n    qtyOnDoc: [0],\r\n    qtyReturned: [0],\r\n    batchDate: [],\r\n    owner: [''],\r\n    fault: [''],\r\n    docNo: ['', Validators.required],\r\n    docDate: [,Validators.required],\r\n    resolved: [],\r\n    comment: ['']\r\n  })\r\n\r\n  showToast = false;\r\n  message = 'Something went wrong'\r\n\r\n  //Gets the id and name of the model in the search criteria\r\n  getModel(modelName: string, type: string) {\r\n    let modelFound: any[] = []\r\n\r\n    //Get the type of model\r\n    if (type == 'customerType') {\r\n      let customerFound = this.customerList.filter(c => c.customerName == modelName)\r\n      console.log(customerFound.length)\r\n      if (customerFound.length > 0) {\r\n        customerFound.map(c => { this.custIdFromTemplate = c.id!; this.customer.customerName = c.customerName! })\r\n      }\r\n      else {\r\n        this.custIdFromTemplate = this.notFound\r\n      }\r\n    }\r\n\r\n    if (type == 'productType') {\r\n      let productFound = this.productList.filter(p => p.productName == modelName)\r\n      if (productFound.length > 0) {\r\n        productFound.map(p => { this.prodIdFromTemplate = p.id!; this.product.productName = p.productName! })\r\n      }\r\n      else {\r\n        this.prodIdFromTemplate = this.notFound\r\n      }\r\n    }\r\n    if (type == 'faultType') {\r\n      let faultFound = this.faultList.filter(f => f.name == modelName)\r\n      if (faultFound.length > 0) {\r\n        faultFound.map(f => { this.faultIdFromTemplate = f.id!; this.fault.name = f.name! })\r\n      }\r\n      else {\r\n        this.faultIdFromTemplate = this.notFound\r\n      }\r\n    }\r\n    if (type == 'ownerType') {\r\n      let ownerFound = this.ownerList.filter(o => o.firstName == modelName)\r\n      if (ownerFound.length > 0) {\r\n        ownerFound.map(o => { this.ownerIdFromTemplate = o.id!; this.owner.firstName = o.firstName! })\r\n      }\r\n      else {\r\n        this.ownerIdFromTemplate = this.notFound\r\n      }\r\n    }\r\n\r\n\r\n  }\n\n  toggleBatch() {\n    this.batchDateToggle = !this.batchDateToggle;\r\n  }\n\n  save() {\r\n    if (this.form.invalid) {\r\n      this.form.markAllAsTouched()\r\n      console.log(\"Form is invalid\")\r\n      console.log(\"Customer valid?: \" + this.getCustomer.valid)\r\n      console.log(\"Product valid?: \" + this.getProduct.valid)\r\n      console.log(\"Fault valid?: \" + this.getFault.valid)\r\n      console.log(\"Owner valid?: \" + this.getOwner.valid)\r\n      console.log(\"User id is: \" + this.userId)\r\n      return\r\n    }\r\n\r\n    this.message = 'Return Saved'\r\n    this.showToast = true\r\n\r\n    const createdReturn: ReturnDto = {\r\n      docDate: this.form.get('docDate')?.value!,\r\n      customerId: this.custIdFromTemplate,\r\n      productId: this.prodIdFromTemplate,\r\n      qtyOnDoc: this.form.get('qtyOnDoc')?.value!,\r\n      batchDate: this.form.get('batchDate')?.value!,\r\n      ownerId: this.ownerIdFromTemplate,\r\n      faultId: this.faultIdFromTemplate,\r\n      docNo: this.form.get('docNo')?.value!,\r\n      qtyReturned: this.form.get('qtyReturned')?.value!,\r\n      resolved: JSON.parse(this.form.controls.resolved.value!),\r\n      comment: this.form.get('comment')?.value!,\r\n      userId: this.userId!\r\n    }\r\n\r\n\r\n\r\n    this.returnService.createReturnReturn({ body: createdReturn }).subscribe(_ => { this.appService.setMessage(this.message); this.appService.showToast(this.showToast) }, this.handleError)\r\n    this.router.navigate(['/search-returns'])\r\n  }\n\n  private handleError = (err: any) => {\r\n\r\n    if (err.status == 404) {\r\n      this.router.navigate(['/search-returns'])\r\n    }\r\n\r\n    console.log(\"Response Error. Status: \", err.status)\r\n    console.log(\"Response Error. Status: \", err.statusText)\r\n    console.log(err);\r\n  }\n\n  //getters\r\n  get getDocDate() {\r\n    return this.form.controls.docDate\r\n  }\r\n\r\n  get getCustomer() {\r\n    return this.form.controls.customer\r\n  }\r\n\r\n  get getProduct() {\r\n    return this.form.controls.product\r\n  }\r\n\r\n  get getQtyOnDoc() {\r\n    return this.form.controls.qtyOnDoc\r\n  }\r\n\r\n  get getBatchDate() {\r\n    return this.form.controls.batchDate\r\n  }\r\n\r\n  get getOwner() {\r\n    return this.form.controls.owner\r\n  }\r\n\r\n  get getFault() {\r\n    return this.form.controls.fault\r\n  }\r\n\r\n  get getDocNo() {\r\n    return this.form.controls.docNo\r\n  }\r\n\r\n  get getQtyReturned() {\r\n    return this.form.controls.qtyReturned\r\n  }\r\n\r\n  get getResolved() {\r\n    return this.form.controls.resolved\r\n  }\r\n\r\n  get getComment() {\r\n    return this.form.controls.comment\r\n  }\r\n\r\n  //modals\r\n\r\n  //Modal Forms\r\n  newCustomerForm = this.fb.group({\n    customerName: [''],\n    email: [''],\n    address: [''],\n    shortCode: [''],\n  })\r\n  //\r\n    //customer Modal\r\n  openCustomerModal(content: any) {\r\n    this.newCustomerForm.reset()\r\n    this.customerIdFromTemplate = ''\r\n    this.customerShortCodeFromTemplate = ''\r\n\r\n    this.modalService.open(content, { ariaLabelledBy: 'modal-basic-title' }).result.then(\r\n      (result) => {\r\n        this.closeResult = `Closed with: ${result}`;\r\n        this.saveNewCustomer()\r\n      },\r\n      (reason) => {\r\n        this.closeResult = `Dismissed ${this.getDismissReason(reason)}`;\r\n      },\r\n    );\r\n  }\r\n\r\n  private getDismissReason(reason: any): string {\r\n    if (reason === ModalDismissReasons.ESC) {\r\n      return 'by pressing ESC';\r\n    } else if (reason === ModalDismissReasons.BACKDROP_CLICK) {\r\n      return 'by clicking on a backdrop';\r\n    } else {\r\n      return `with: ${reason}`;\r\n    }\r\n  }\r\n    //customer Modal\r\n  //modal extensions\r\n  customerIdFromTemplate = ''\r\n  customerShortCodeFromTemplate = ''\r\n  customerAlreadyExists = 'Customer already exists'\r\n  customerShortCodeAlreadyExists = 'Short code already exists'\r\n\r\n\n  saveNewCustomer() {\n    if (this.customerIdFromTemplate == this.customerAlreadyExists || this.customerShortCodeFromTemplate == this.customerShortCodeAlreadyExists) {\n      return\n    }\n\n    let newCustomer: CustomerRm = {\n      customerName: this.newCustomerForm.controls.customerName.value,\n      email: this.newCustomerForm.controls.email.value,\n      address: this.newCustomerForm.controls.address.value,\n      shortCode: this.newCustomerForm.controls.shortCode.value\n    }\n\n    this.customerService.createCustomer({ body: newCustomer }).subscribe(() => {\n      this.showToast = true\n      if (this.form.valid) {\n        this.message = 'Customer added successfully'\n        console.log('Customer added successfully')\n        this.customerList = []\n        this.customerService.searchCustomer().subscribe(c => this.customerList = c, this.handleError)\n      }\n      else if (this.form.valid && !this.form.touched && !this.form.dirty) {\n        this.message = 'Nothing added'\n        console.log('Nothing added')\n      }\n      //this.appService.setMessage(this.message);\n      //this.appService.showToast(this.showToast)\n      console.log('customer control raw value: ' + this.form.controls.customer.value)\n    })\n\n  }\r\n\r\n  customerExists(customerName: string) {\n    this.customerIdFromTemplate = ''\n    if (this.customer.customerName?.toLowerCase().trim() != customerName.toLowerCase().trim()) {\n      let customerFound = this.customerList.filter(c => c.customerName?.toLowerCase().trim() == customerName.toLowerCase().trim())\n      if (customerFound.length > 0) {\n        this.customerIdFromTemplate = this.customerAlreadyExists\n      }\n    }\n  }\n\n  customerShortCodeExists(shortCode: string) {\n    this.customerShortCodeFromTemplate = ''\n    if (this.customer.shortCode?.toLowerCase().trim() != shortCode.toLowerCase().trim()) {\n      let skuFound = this.customerList.filter(s => s.shortCode?.toLowerCase().trim() == shortCode.toLowerCase().trim())\n      if (skuFound.length > 0) {\n        this.customerShortCodeFromTemplate = this.customerShortCodeAlreadyExists\n      }\n    }\n  }\r\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}