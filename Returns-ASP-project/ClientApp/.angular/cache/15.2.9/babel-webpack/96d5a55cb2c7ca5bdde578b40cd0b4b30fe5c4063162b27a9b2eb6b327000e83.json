{"ast":null,"code":"var _class;\n/* tslint:disable */\n/* eslint-disable */\nimport { HttpResponse } from '@angular/common/http';\nimport { filter, map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class CustomerService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `searchCustomer()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchCustomer$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchCustomer$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.SearchCustomerPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchCustomer$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchCustomer$Plain(params, context) {\n    return this.searchCustomer$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchCustomer()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchCustomer$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.SearchCustomerPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchCustomer$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchCustomer(params, context) {\n    return this.searchCustomer$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findCustomer()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findCustomer$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findCustomer$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.FindCustomerPath, 'get');\n    if (params) {\n      rb.path('Id', params.Id, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findCustomer$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findCustomer$Plain(params, context) {\n    return this.findCustomer$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findCustomer()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findCustomer$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.FindCustomerPath, 'get');\n    if (params) {\n      rb.path('Id', params.Id, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findCustomer$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findCustomer(params, context) {\n    return this.findCustomer$Response(params, context).pipe(map(r => r.body));\n  }\n}\n_class = CustomerService;\n_class.SearchCustomerPath = '/Customer';\n_class.FindCustomerPath = '/Customer/{id}';\n_class.ɵfac = function CustomerService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpResponse","filter","map","BaseService","RequestBuilder","CustomerService","constructor","config","http","searchCustomer$Plain$Response","params","context","rb","rootUrl","SearchCustomerPath","request","build","responseType","accept","pipe","r","searchCustomer$Plain","body","searchCustomer$Response","searchCustomer","findCustomer$Plain$Response","FindCustomerPath","path","Id","findCustomer$Plain","findCustomer$Response","findCustomer","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Rowan\\source\\repos\\Returns-ASP-project\\Returns-ASP-project\\ClientApp\\src\\app\\api\\services\\customer.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\n\r\nimport { CustomerRm } from '../models/customer-rm';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CustomerService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `searchCustomer()` */\r\n  static readonly SearchCustomerPath = '/Customer';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchCustomer$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchCustomer$Plain$Response(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<Array<CustomerRm>>> {\r\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.SearchCustomerPath, 'get');\r\n    if (params) {\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<CustomerRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchCustomer$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchCustomer$Plain(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<Array<CustomerRm>> {\r\n    return this.searchCustomer$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<CustomerRm>>): Array<CustomerRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchCustomer()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchCustomer$Response(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<Array<CustomerRm>>> {\r\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.SearchCustomerPath, 'get');\r\n    if (params) {\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'json', accept: 'text/json', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<CustomerRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchCustomer$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchCustomer(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<Array<CustomerRm>> {\r\n    return this.searchCustomer$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<CustomerRm>>): Array<CustomerRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `findCustomer()` */\r\n  static readonly FindCustomerPath = '/Customer/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findCustomer$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findCustomer$Plain$Response(\r\n    params: {\r\n      Id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<CustomerRm>> {\r\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.FindCustomerPath, 'get');\r\n    if (params) {\r\n      rb.path('Id', params.Id, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<CustomerRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findCustomer$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findCustomer$Plain(\r\n    params: {\r\n      Id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<CustomerRm> {\r\n    return this.findCustomer$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<CustomerRm>): CustomerRm => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findCustomer()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findCustomer$Response(\r\n    params: {\r\n      Id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<CustomerRm>> {\r\n    const rb = new RequestBuilder(this.rootUrl, CustomerService.FindCustomerPath, 'get');\r\n    if (params) {\r\n      rb.path('Id', params.Id, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'json', accept: 'text/json', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<CustomerRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findCustomer$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findCustomer(\r\n    params: {\r\n      Id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<CustomerRm> {\r\n    return this.findCustomer$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<CustomerRm>): CustomerRm => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}