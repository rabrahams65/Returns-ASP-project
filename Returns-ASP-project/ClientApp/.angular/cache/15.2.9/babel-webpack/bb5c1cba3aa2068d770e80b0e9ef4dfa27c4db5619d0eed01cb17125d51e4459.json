{"ast":null,"code":"\"use strict\";\n\n//import { Component, OnInit } from '@angular/core';\n//import { FormBuilder, Validators } from '@angular/forms';\n//import { Router } from '@angular/router';\n//import { ReturnDto, ReturnRm } from '../api/models';\n//import { ReturnService } from '../api/services';\n//import { AppService } from '../app.service';\n//@Component({\n//  selector: 'app-add-new',\n//  templateUrl: './add-new.component.html',\n//  styleUrls: ['./add-new.component.css']\n//})\n//export class AddNewComponent implements OnInit {\n//  batchDateToggle = false;\n//  constructor(private fb: FormBuilder, private returnService: ReturnService, private router: Router, private appService: AppService) { }\n//  ngOnInit(): void {\n//  }\n//  form = this.fb.group({\n//    customer: ['', Validators.required],\n//    product: ['', Validators.required],\n//    qtyOnDoc: [0],\n//    qtyReturned: [0],\n//    batchDate: [],\n//    owner: [''],\n//    fault: [''],\n//    docNo: ['', Validators.required],\n//    docDate: [,Validators.required],\n//    resolved: [],\n//    comment: ['']\n//  })\n//  showToast = false;\n//  message = 'Something went wrong'\n//  toggleBatch() {\n//    this.batchDateToggle = !this.batchDateToggle;\n//  }\n//  save() {\n//    if (this.form.invalid) {\n//      this.form.markAllAsTouched()\n//      return\n//    }\n//    this.message = 'Return Saved'\n//    this.showToast = true\n//    const createdReturn: ReturnDto = {\n//      docDate: this.form.get('docDate')?.value!,\n//      customer: this.form.get('customer')?.value!,\n//      product: this.form.get('product')?.value!,\n//      qtyOnDoc: this.form.get('qtyOnDoc')?.value!,\n//      batchDate: this.form.get('batchDate')?.value!,\n//      owner: this.form.get('owner')?.value!,\n//      fault: this.form.get('fault')?.value!,\n//      docNo: this.form.get('docNo')?.value!,\n//      qtyReturned: this.form.get('qtyReturned')?.value!,\n//      resolved: JSON.parse(this.form.controls.resolved.value!),\n//      comment: this.form.get('comment')?.value!\n//    }\n//    this.returnService.createReturnReturn({ body: createdReturn }).subscribe(_ => { this.appService.setMessage(this.message); this.appService.showToast(this.showToast) }, this.handleError)\n//    this.router.navigate(['/search-returns'])\n//  }\n//  private handleError = (err: any) => {\n//    if (err.status == 404) {\n//      this.router.navigate(['/search-returns'])\n//    }\n//    console.log(\"Response Error. Status: \", err.status)\n//    console.log(\"Response Error. Status: \", err.statusText)\n//    console.log(err);\n//  }\n//  get customer() {\n//    return this.form.controls.customer\n//  }\n//  get product() {\n//    return this.form.controls.product\n//  }\n//  get docDate() {\n//    return this.form.controls.docDate\n//  }\n//  get docNo() {\n//    return this.form.controls.docNo\n//  }\n//}","map":{"version":3,"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA","names":[],"sourceRoot":"","sources":["C:\\Users\\Rowan\\source\\repos\\Returns-ASP-project\\Returns-ASP-project\\ClientApp\\src\\app\\add-new\\add-new.component.ts"],"sourcesContent":["//import { Component, OnInit } from '@angular/core';\n//import { FormBuilder, Validators } from '@angular/forms';\r\n//import { Router } from '@angular/router';\r\n//import { ReturnDto, ReturnRm } from '../api/models';\r\n//import { ReturnService } from '../api/services';\r\n//import { AppService } from '../app.service';\r\n\n//@Component({\n//  selector: 'app-add-new',\n//  templateUrl: './add-new.component.html',\n//  styleUrls: ['./add-new.component.css']\n//})\n//export class AddNewComponent implements OnInit {\n\n//  batchDateToggle = false;\n\n//  constructor(private fb: FormBuilder, private returnService: ReturnService, private router: Router, private appService: AppService) { }\n\n//  ngOnInit(): void {\n//  }\n\n//  form = this.fb.group({\r\n//    customer: ['', Validators.required],\r\n//    product: ['', Validators.required],\r\n//    qtyOnDoc: [0],\r\n//    qtyReturned: [0],\r\n//    batchDate: [],\r\n//    owner: [''],\r\n//    fault: [''],\r\n//    docNo: ['', Validators.required],\r\n//    docDate: [,Validators.required],\r\n//    resolved: [],\r\n//    comment: ['']\r\n//  })\r\n\r\n//  showToast = false;\r\n//  message = 'Something went wrong'\r\n\n\n//  toggleBatch() {\n//    this.batchDateToggle = !this.batchDateToggle;\r\n//  }\n\n//  save() {\r\n//    if (this.form.invalid) {\r\n//      this.form.markAllAsTouched()\r\n//      return\r\n//    }\r\n\r\n//    this.message = 'Return Saved'\r\n//    this.showToast = true\r\n\r\n//    const createdReturn: ReturnDto = {\r\n//      docDate: this.form.get('docDate')?.value!,\r\n//      customer: this.form.get('customer')?.value!,\r\n//      product: this.form.get('product')?.value!,\r\n//      qtyOnDoc: this.form.get('qtyOnDoc')?.value!,\r\n//      batchDate: this.form.get('batchDate')?.value!,\r\n//      owner: this.form.get('owner')?.value!,\r\n//      fault: this.form.get('fault')?.value!,\r\n//      docNo: this.form.get('docNo')?.value!,\r\n//      qtyReturned: this.form.get('qtyReturned')?.value!,\r\n//      resolved: JSON.parse(this.form.controls.resolved.value!),\r\n//      comment: this.form.get('comment')?.value!\r\n//    }\r\n\r\n\r\n\r\n//    this.returnService.createReturnReturn({ body: createdReturn }).subscribe(_ => { this.appService.setMessage(this.message); this.appService.showToast(this.showToast) }, this.handleError)\r\n//    this.router.navigate(['/search-returns'])\r\n//  }\n\n//  private handleError = (err: any) => {\r\n\r\n//    if (err.status == 404) {\r\n//      this.router.navigate(['/search-returns'])\r\n//    }\r\n\r\n//    console.log(\"Response Error. Status: \", err.status)\r\n//    console.log(\"Response Error. Status: \", err.statusText)\r\n//    console.log(err);\r\n//  }\n\n//  get customer() {\r\n//    return this.form.controls.customer\r\n//  }\r\n\r\n//  get product() {\r\n//    return this.form.controls.product\r\n//  }\n\n//  get docDate() {\n//    return this.form.controls.docDate\r\n//  }\n\n//  get docNo() {\n//    return this.form.controls.docNo\r\n//  }\n\n//}\n\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}