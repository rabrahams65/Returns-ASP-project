{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { formatDate } from '@angular/common';\nimport { Component, Inject, LOCALE_ID, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged, filter, map } from 'rxjs';\nlet ReturnDetailComponent = class ReturnDetailComponent {\n  //form: FormGroup;\n  constructor(route, returnService, router, authService, fb, locale, appService, userService, customerService, productService, faultService, ownerService) {\n    /*    this.form = this.fb.group({})*/\n    this.route = route;\n    this.returnService = returnService;\n    this.router = router;\n    this.authService = authService;\n    this.fb = fb;\n    this.locale = locale;\n    this.appService = appService;\n    this.userService = userService;\n    this.customerService = customerService;\n    this.productService = productService;\n    this.faultService = faultService;\n    this.ownerService = ownerService;\n    this.returnId = 'not loaded';\n    this.batchDateDisable = false;\n    this.modelInUse = 'none';\n    this.return = {};\n    this.customer = {};\n    this.product = {};\n    this.fault = {};\n    this.owner = {};\n    this.custIdFromTemplate = '';\n    this.prodIdFromTemplate = '';\n    this.faultIdFromTemplate = '';\n    this.ownerIdFromTemplate = '';\n    this.customerList = [];\n    this.productList = [];\n    this.faultList = [];\n    this.ownerList = [];\n    this.message = 'Something went wrong...';\n    this.showToast = false;\n    this.userId = 'not loaded';\n    this.form = this.fb.group({\n      customer: ['', Validators.required],\n      product: ['', Validators.required],\n      qtyOnDoc: [0],\n      qtyReturned: [0],\n      batchDate: [''],\n      owner: [''],\n      fault: [''],\n      docNo: ['', Validators.required],\n      docDate: ['', Validators.required],\n      resolved: [true],\n      comment: ['']\n    });\n    this.custFormatter = customer => customer.customerName;\n    this.prodFormatter = product => product.productName;\n    this.faultFormatter = fault => fault.name;\n    this.ownerFormatter = owner => owner.firstName;\n    //Gets all customers for searchbox\n    this.searchCust = text$ => {\n      this.customerService.searchCustomer().subscribe(c => this.customerList = c, this.handleError);\n      return text$.pipe(debounceTime(200), distinctUntilChanged(), filter(term => term.length >= 2), map(term => this.customerList.filter(customer => new RegExp(term, 'mi').test(customer.customerName)).slice(0, 10)));\n    };\n    //Gets all products for searchbox\n    this.searchProd = text$ => {\n      this.productService.searchProduct().subscribe(p => this.productList = p, this.handleError);\n      return text$.pipe(debounceTime(200), distinctUntilChanged(), filter(term => term.length >= 2), map(term => this.productList.filter(product => new RegExp(term, 'mi').test(product.productName)).slice(0, 10)));\n    };\n    //Gets all faults for searchbox\n    this.searchFault = text$ => {\n      this.faultService.searchFault().subscribe(f => this.faultList = f, this.handleError);\n      return text$.pipe(debounceTime(200), distinctUntilChanged(), filter(term => term.length >= 2), map(term => this.faultList.filter(fault => new RegExp(term, 'mi').test(fault.name)).slice(0, 10)));\n    };\n    //Gets all owners for searchbox\n    this.searchOwner = text$ => {\n      this.ownerService.searchOwner().subscribe(o => this.ownerList = o, this.handleError);\n      return text$.pipe(debounceTime(200), distinctUntilChanged(), filter(term => term.length >= 2), map(term => this.ownerList.filter(owner => new RegExp(term, 'mi').test(owner.firstName)).slice(0, 10)));\n    };\n    this.getUserId = userId => {\n      this.userId = userId;\n    };\n    this.findReturn = returnId => {\n      this.returnId = returnId ?? 'not passed';\n      this.returnService.findReturn({\n        id: this.returnId\n      }).subscribe(r => {\n        this.return = r;\n        this.customerService.findCustomer({\n          id: r.customerId\n        }).subscribe(c => {\n          this.setCustomerName(c);\n          this.custIdFromTemplate = c.id;\n        }, this.handleError);\n        this.productService.findProduct({\n          id: r.productId\n        }).subscribe(p => this.setProductName(p), this.handleError);\n        this.faultService.findFault({\n          id: r.faultId\n        }).subscribe(f => this.setFaultName(f), this.handleError);\n        this.ownerService.findOwner({\n          id: r.ownerId\n        }).subscribe(o => this.setOwnerName(o), this.handleError);\n        //this.userService.findUser({ }) set up endpoint to find user by Id as well\n      }, this.handleError);\n    };\n    this.handleError = err => {\n      if (err.status == 404) {\n        this.router.navigate(['/search-returns']);\n      }\n      console.log(\"Response Error. Status: \", err.status);\n      console.log(\"Response Error. Status: \", err.statusText);\n      console.log(err);\n    };\n    //use again if default resolved dropdown does not work again.\n    //this.form.controls['resolved'].setValue(\"Test\", { onlySelf: true });\n  }\n\n  ngAfterViewInit() {}\n  ngOnInit() {\n    if (!this.authService.currentUser) {\n      this.router.navigate(['/register-user']);\n    }\n    this.userService.findUser({\n      email: this.authService.currentUser?.email\n    }).subscribe(u => {\n      this.getUserId(u.id);\n      console.log('The user id in the oninit subscribe call is: ' + this.userId);\n    });\n    this.route.paramMap.subscribe(p => this.findReturn(p.get(\"returnId\")));\n    console.log('OnInit userEmail = ' + this.authService.currentUser?.email);\n  }\n  toggleBatch() {\n    this.batchDateDisable = !this.batchDateDisable;\n    if (this.batchDateDisable == true && this.return.batchDate?.length > 1) {\n      this.form.controls['batchDate'].disable();\n      this.form.controls.batchDate.setValue(null);\n    } else if (this.batchDateDisable == false && this.return.batchDate?.length > 1) {\n      this.form.controls['batchDate'].enable();\n    } else if (this.batchDateDisable == true) {\n      this.form.controls['batchDate'].enable();\n      this.form.controls.batchDate.setValue(null);\n    } else if (this.batchDateDisable == false) {\n      this.form.controls['batchDate'].disable();\n    }\n  }\n  getCustomerIdByName(customerName) {\n    let customerFound = this.customerList.filter(c => c.customerName == customerName);\n    if (customerFound.length > 0) {\n      customerFound.map(c => this.custIdFromTemplate = c.id);\n    } else {\n      this.custIdFromTemplate = 'Not Found';\n    }\n  }\n  getProductIdByName(productName) {\n    let productFound = this.productList.filter(p => p.productName == productName);\n    if (productFound.length > 0) {\n      productFound.map(p => this.prodIdFromTemplate = p.id);\n    } else {\n      this.prodIdFromTemplate = 'Not Found';\n    }\n  }\n  getOwnerIdByName(ownerName) {\n    let ownerFound = this.ownerList.filter(o => o.firstName == ownerName);\n    if (ownerFound.length > 0) {\n      ownerFound.map(o => this.ownerIdFromTemplate = o.id);\n    } else {\n      this.ownerIdFromTemplate = 'Not Found';\n    }\n  }\n  getFaultIdByName(faultName) {\n    let faultFound = this.faultList.filter(f => f.name == name);\n    if (faultFound.length > 0) {\n      faultFound.map(f => this.faultIdFromTemplate = f.id);\n    } else {\n      this.faultIdFromTemplate = 'Not Found';\n    }\n  }\n  //Sets values upon initilization\n  setCustomerName(customer) {\n    this.customer = customer;\n  }\n  setProductName(product) {\n    this.product = product;\n  }\n  setFaultName(fault) {\n    this.fault = fault;\n  }\n  setOwnerName(owner) {\n    this.owner = owner;\n  }\n  //Get by Id's\n  //private getCustomerIdByName(customerName: string): string {\n  //  let customer = 'Not found'\n  //  this.customerService.findByNameCustomer({ name: customerName }).subscribe(c => customerName = c.customerName!)\n  //  return customer\n  //}\n  update() {\n    //console.log(this.batchDate.value + ' ' + this.docDate.value)\n    if (!this.getCustomer.touched || !this.getCustomer.dirty) {\n      this.form.controls.customer.setValue(this.customer.customerName);\n    }\n    if ((!this.getDocDate.touched || !this.getDocDate.dirty) && this.getDocDate.value != '') {\n      this.form.controls.docDate.setValue(formatDate(this.return.docDate, 'yyyy-MM-dd', this.locale));\n    }\n    if (!this.getDocDate.touched || !this.getDocDate.dirty && this.getDocDate.value == null) {\n      this.form.controls.docDate.setValue(this.return.docDate);\n    }\n    if (!this.getProduct.touched || !this.getProduct.dirty) {\n      this.form.controls.product.setValue(this.product.productName);\n    }\n    if (!this.getQtyOnDoc.touched || !this.getQtyOnDoc.dirty) {\n      this.form.controls.qtyOnDoc.setValue(this.return.qtyOnDoc);\n    }\n    if ((!this.getBatchDate.touched || !this.getBatchDate.dirty) && this.getBatchDate.value != null) {\n      this.form.controls.batchDate.setValue(formatDate(this.return.batchDate, 'yyyy-MM-dd', this.locale));\n    }\n    if (!this.getBatchDate.touched || !this.getBatchDate.dirty && this.getBatchDate.value == null) {\n      this.form.controls.batchDate.setValue(this.return.batchDate);\n    }\n    if (!this.getOwner.touched || !this.getOwner.dirty) {\n      this.form.controls.owner.setValue(this.owner.firstName);\n    }\n    if (!this.getFault.touched || !this.getFault.dirty) {\n      this.form.controls.fault.setValue(this.fault.name);\n    }\n    if (!this.getDocNo.touched || !this.getDocNo.dirty) {\n      this.form.controls.docNo.setValue(this.return.docNo);\n    }\n    if (!this.getQtyReturned.touched || !this.getQtyReturned.dirty) {\n      this.form.controls.qtyReturned.setValue(this.return.qtyReturned);\n    }\n    if (!this.getResolved.touched || !this.getResolved.dirty) {\n      this.form.controls.resolved.setValue(this.return.resolved);\n    }\n    if (!this.getComment.touched || !this.getComment.dirty) {\n      this.form.controls.comment.setValue(this.return.comment);\n    }\n    //Conver objects to id's\n    let editedReturn = {\n      id: this.returnId,\n      docDate: this.form.controls.docDate.value,\n      customerId: this.form.controls.customer.value,\n      productId: this.form.controls.product.value,\n      qtyOnDoc: this.form.controls.qtyOnDoc.value,\n      batchDate: this.form.controls.batchDate.value,\n      ownerId: this.form.controls.owner.value,\n      faultId: this.form.controls.fault.value,\n      docNo: this.form.controls.docNo.value,\n      qtyReturned: this.form.controls.qtyReturned.value,\n      resolved: this.form.controls.resolved.value,\n      comment: this.form.controls.comment.value\n    };\n    if (this.form.invalid) {\n      //this.form.markAllAsTouched();\n      return;\n    }\n    if (this.form.valid && this.form.dirty && this.form.touched) {\n      this.message = 'Return updated successfully';\n      this.showToast = true;\n    } else if (this.form.valid && !this.form.touched && !this.form.dirty) {\n      this.message = 'Nothing updated';\n      this.showToast = true;\n    }\n    this.returnService.updateReturnReturn({\n      id: this.returnId,\n      body: editedReturn\n    }).subscribe(_ => {\n      this.appService.setMessage(this.message);\n      this.appService.showToast(this.showToast);\n    }, this.handleError);\n    this.router.navigate(['/']);\n  }\n  //getters\n  get getDocDate() {\n    return this.form.controls.docDate;\n  }\n  get getCustomer() {\n    return this.form.controls.customer;\n  }\n  get getProduct() {\n    return this.form.controls.product;\n  }\n  get getQtyOnDoc() {\n    return this.form.controls.qtyOnDoc;\n  }\n  get getBatchDate() {\n    return this.form.controls.batchDate;\n  }\n  get getOwner() {\n    return this.form.controls.owner;\n  }\n  get getFault() {\n    return this.form.controls.fault;\n  }\n  get getDocNo() {\n    return this.form.controls.docNo;\n  }\n  get getQtyReturned() {\n    return this.form.controls.qtyReturned;\n  }\n  get getResolved() {\n    return this.form.controls.resolved;\n  }\n  get getComment() {\n    return this.form.controls.comment;\n  }\n};\n__decorate([ViewChild('resolvedDropdown', {\n  static: true\n})], ReturnDetailComponent.prototype, \"resolvedDropdownRef\", void 0);\nReturnDetailComponent = __decorate([Component({\n  selector: 'app-return-detail',\n  templateUrl: './return-detail.component.html',\n  styleUrls: ['./return-detail.component.css']\n}), __param(5, Inject(LOCALE_ID))], ReturnDetailComponent);\nexport { ReturnDetailComponent };","map":{"version":3,"mappings":"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","names":["formatDate","Component","Inject","LOCALE_ID","ViewChild","Validators","debounceTime","distinctUntilChanged","filter","map","ReturnDetailComponent","constructor","route","returnService","router","authService","fb","locale","appService","userService","customerService","productService","faultService","ownerService","group","customer","required","product","qtyOnDoc","qtyReturned","batchDate","owner","fault","docNo","docDate","resolved","comment","customerName","productName","name","firstName","text$","searchCustomer","subscribe","c","customerList","handleError","pipe","term","length","RegExp","test","slice","searchProduct","p","productList","searchFault","f","faultList","searchOwner","o","ownerList","userId","returnId","findReturn","id","r","return","findCustomer","customerId","setCustomerName","custIdFromTemplate","findProduct","productId","setProductName","findFault","faultId","setFaultName","findOwner","ownerId","setOwnerName","err","status","navigate","console","log","statusText","ngAfterViewInit","ngOnInit","currentUser","findUser","email","u","getUserId","paramMap","get","toggleBatch","batchDateDisable","form","controls","disable","setValue","enable","getCustomerIdByName","customerFound","getProductIdByName","productFound","prodIdFromTemplate","getOwnerIdByName","ownerName","ownerFound","ownerIdFromTemplate","getFaultIdByName","faultName","faultFound","faultIdFromTemplate","update","getCustomer","touched","dirty","getDocDate","value","getProduct","getQtyOnDoc","getBatchDate","getOwner","getFault","getDocNo","getQtyReturned","getResolved","getComment","editedReturn","invalid","valid","message","showToast","updateReturnReturn","body","_","setMessage","__decorate","static","selector","templateUrl","styleUrls","__param"],"sourceRoot":"","sources":["C:\\Users\\Rowan\\source\\repos\\Returns-ASP-project\\Returns-ASP-project\\ClientApp\\src\\app\\return-detail\\return-detail.component.ts"],"sourcesContent":["import { formatDate } from '@angular/common';\r\nimport { AfterViewInit, Component, ElementRef, Inject, LOCALE_ID, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CustomerRm, FaultRm, OwnerRm, ProductRm, ReturnDto } from '../api/models';\r\nimport { ReturnRm } from '../api/models/return-rm';\r\nimport { CustomerService, FaultService, OwnerService, ProductService, ReturnService, UserService } from '../api/services';\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { AppService } from '../app.service';\r\nimport { debounceTime, distinctUntilChanged, filter, map, Observable, OperatorFunction } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-return-detail',\r\n  templateUrl: './return-detail.component.html',\r\n  styleUrls: ['./return-detail.component.css']\r\n})\r\nexport class ReturnDetailComponent implements OnInit, AfterViewInit {\r\n  @ViewChild('resolvedDropdown', { static: true }) resolvedDropdownRef?: ElementRef<HTMLElement>;\r\n  //form: FormGroup;\r\n\r\n  constructor(private route: ActivatedRoute, private returnService: ReturnService, private router: Router, private authService: AuthService,\r\n    private fb: FormBuilder, @Inject(LOCALE_ID) private locale: string, private appService: AppService, private userService: UserService, private customerService: CustomerService,\r\n    private productService: ProductService, private faultService: FaultService, private ownerService: OwnerService  ) {\r\n\r\n/*    this.form = this.fb.group({})*/\r\n    \r\n\r\n   \r\n\r\n    //use again if default resolved dropdown does not work again.\r\n    //this.form.controls['resolved'].setValue(\"Test\", { onlySelf: true });\r\n}\r\n\r\n  ngAfterViewInit() {\r\n\r\n  }\r\n\r\n  returnId: string = 'not loaded'\r\n  batchDateDisable = false\r\n  modelInUse = 'none'\r\n  return: ReturnRm = {}\r\n  customer: CustomerRm = {}\r\n  product: ProductRm = {}\r\n  fault: FaultRm = {}\r\n  owner: OwnerRm = {}\r\n  custIdFromTemplate = ''\r\n  prodIdFromTemplate = ''\r\n  faultIdFromTemplate = ''\r\n  ownerIdFromTemplate = ''\r\n\r\n  customerList: CustomerRm[] = []\r\n  productList: ProductRm[] = []\r\n  faultList: FaultRm[] = []\r\n  ownerList: OwnerRm[] = []\r\n\r\n  message = 'Something went wrong...'\r\n  showToast = false;\r\n  userId = 'not loaded'\r\n\r\n  form = this.fb.group({\r\n    customer: ['', Validators.required],\r\n    product: ['', Validators.required],\r\n    qtyOnDoc: [0],\r\n    qtyReturned: [0],\r\n    batchDate: [''],\r\n    owner: [''],\r\n    fault: [''],\r\n    docNo: ['', Validators.required],\r\n    docDate: ['', Validators.required],\r\n    resolved: [true],\r\n    comment: ['']\r\n  })\r\n\r\n  custFormatter = (customer: CustomerRm) => customer.customerName!\r\n  prodFormatter = (product: ProductRm) => product.productName!\r\n  faultFormatter = (fault: FaultRm) => fault.name!\r\n  ownerFormatter = (owner: OwnerRm) => owner.firstName!\r\n\r\n  //Gets all customers for searchbox\r\n  searchCust: OperatorFunction<string, readonly { id?: string | undefined | null; name?: string | undefined | null }[]> = (text$: Observable<string>) => {\r\n    this.customerService.searchCustomer().subscribe(c => this.customerList = c, this.handleError)\r\n\r\n    return text$.pipe(\r\n          debounceTime(200),\r\n          distinctUntilChanged(),\r\n          filter((term) => term.length >= 2),\r\n          map((term) => this.customerList.filter((customer) => new RegExp(term, 'mi').test(customer.customerName!)).slice(0, 10))\r\n      );\r\n  }\r\n\r\n  //Gets all products for searchbox\r\n  searchProd: OperatorFunction<string, readonly { id?: string | undefined | null; name?: string | undefined | null }[]> = (text$: Observable<string>) => {\r\n    this.productService.searchProduct().subscribe(p => this.productList = p, this.handleError)\r\n\r\n    return text$.pipe(\r\n      debounceTime(200),\r\n      distinctUntilChanged(),\r\n      filter((term) => term.length >= 2),\r\n      map((term) => this.productList.filter((product) => new RegExp(term, 'mi').test(product.productName!)).slice(0, 10))\r\n    );\r\n  }\r\n\r\n  //Gets all faults for searchbox\r\n  searchFault: OperatorFunction<string, readonly { id?: string | undefined | null; name?: string | undefined | null }[]> = (text$: Observable<string>) => {\r\n    this.faultService.searchFault().subscribe(f => this.faultList = f, this.handleError)\r\n\r\n    return text$.pipe(\r\n      debounceTime(200),\r\n      distinctUntilChanged(),\r\n      filter((term) => term.length >= 2),\r\n      map((term) => this.faultList.filter((fault) => new RegExp(term, 'mi').test(fault.name!)).slice(0, 10))\r\n    );\r\n  }\r\n\r\n  //Gets all owners for searchbox\r\n  searchOwner: OperatorFunction<string, readonly { id?: string | undefined | null; name?: string | undefined | null }[]> = (text$: Observable<string>) => {\r\n    this.ownerService.searchOwner().subscribe(o => this.ownerList = o, this.handleError)\r\n\r\n    return text$.pipe(\r\n      debounceTime(200),\r\n      distinctUntilChanged(),\r\n      filter((term) => term.length >= 2),\r\n      map((term) => this.ownerList.filter((owner) => new RegExp(term, 'mi').test(owner.firstName!)).slice(0, 10))\r\n    );\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n\r\n    if (!this.authService.currentUser) {\r\n      this.router.navigate(['/register-user'])\r\n    }\r\n\r\n    this.userService.findUser({ email: this.authService.currentUser?.email! }).subscribe(u => {\r\n      this.getUserId(u.id!); console.log('The user id in the oninit subscribe call is: ' + this.userId)\r\n    })\r\n\r\n    this.route.paramMap.subscribe(p => this.findReturn(p.get(\"returnId\")));\r\n\r\n    console.log('OnInit userEmail = ' + this.authService.currentUser?.email!)\r\n\r\n    \r\n  }\r\n\r\n  private getUserId = (userId : string)=> {\r\n    this.userId = userId\r\n  }\r\n  \r\n  private findReturn = (returnId: string | null) => {\r\n    this.returnId = returnId ?? 'not passed';\r\n\r\n    this.returnService.findReturn({ id: this.returnId }).subscribe(r =>\r\n    {\r\n      this.return = r\r\n      this.customerService.findCustomer({ id: r.customerId! }).subscribe(c => { this.setCustomerName(c); this.custIdFromTemplate = c.id! }, this.handleError)\r\n      this.productService.findProduct({ id: r.productId! }).subscribe(p => this.setProductName(p), this.handleError)\r\n      this.faultService.findFault({ id: r.faultId! }).subscribe(f => this.setFaultName(f), this.handleError)\r\n      this.ownerService.findOwner({ id: r.ownerId! }).subscribe(o => this.setOwnerName(o), this.handleError)\r\n      //this.userService.findUser({ }) set up endpoint to find user by Id as well\r\n    }\r\n      , this.handleError);\r\n  }\r\n\r\n  toggleBatch() {\r\n    this.batchDateDisable = !this.batchDateDisable;\r\n\r\n    if (this.batchDateDisable == true && this.return.batchDate?.length! > 1) {\r\n      this.form.controls['batchDate'].disable()\r\n      this.form.controls.batchDate.setValue(null)\r\n    }\r\n    else if (this.batchDateDisable == false && this.return.batchDate?.length! > 1) {\r\n      this.form.controls['batchDate'].enable()\r\n    }\r\n    else if (this.batchDateDisable == true ) {\r\n      this.form.controls['batchDate'].enable()\r\n      this.form.controls.batchDate.setValue(null)\r\n    }\r\n    else if (this.batchDateDisable == false) {\r\n      this.form.controls['batchDate'].disable()\r\n    }\r\n  }\r\n\r\n \r\n\r\n  getCustomerIdByName(customerName: string) {\r\n    let customerFound = this.customerList.filter(c => c.customerName == customerName)\r\n    if (customerFound.length > 0) {\r\n      customerFound.map(c => this.custIdFromTemplate = c.id!)\r\n    }\r\n    else {\r\n      this.custIdFromTemplate = 'Not Found'\r\n    }\r\n    \r\n  }\r\n\r\n  getProductIdByName(productName: string) {\r\n    let productFound = this.productList.filter(p => p.productName == productName)\r\n    if (productFound.length > 0) {\r\n      productFound.map(p => this.prodIdFromTemplate = p.id!)\r\n    }\r\n    else {\r\n      this.prodIdFromTemplate = 'Not Found'\r\n    }\r\n  }\r\n\r\n  getOwnerIdByName(ownerName: string) {\r\n    let ownerFound = this.ownerList.filter(o => o.firstName == ownerName)\r\n    if (ownerFound.length > 0) {\r\n      ownerFound.map(o => this.ownerIdFromTemplate = o.id!)\r\n    }\r\n    else {\r\n      this.ownerIdFromTemplate = 'Not Found'\r\n    }\r\n  }\r\n\r\n  getFaultIdByName(faultName: string) {\r\n    let faultFound = this.faultList.filter(f => f.name == name)\r\n    if (faultFound.length > 0) {\r\n      faultFound.map(f => this.faultIdFromTemplate = f.id!)\r\n    }\r\n    else {\r\n      this.faultIdFromTemplate = 'Not Found'\r\n    }\r\n  }\r\n\r\n  private handleError = (err: any) => {\r\n\r\n    if (err.status == 404) {\r\n      this.router.navigate(['/search-returns'])\r\n    }\r\n      \r\n    console.log(\"Response Error. Status: \", err.status)\r\n    console.log(\"Response Error. Status: \", err.statusText)\r\n    console.log(err);\r\n  }\r\n\r\n  //Sets values upon initilization\r\n\r\n  private setCustomerName(customer: CustomerRm) {\r\n    this.customer = customer\r\n  }\r\n\r\n  private setProductName(product: ProductRm) {\r\n    this.product = product\r\n  }\r\n\r\n  private setFaultName(fault: FaultRm) {\r\n   this.fault = fault\r\n  }\r\n\r\n  private setOwnerName(owner: OwnerRm) {\r\n    this.owner = owner\r\n  }\r\n\r\n  //Get by Id's\r\n  //private getCustomerIdByName(customerName: string): string {\r\n  //  let customer = 'Not found'\r\n  //  this.customerService.findByNameCustomer({ name: customerName }).subscribe(c => customerName = c.customerName!)\r\n  //  return customer\r\n  //}\r\n\r\n  update() {\r\n\r\n\r\n\r\n    //console.log(this.batchDate.value + ' ' + this.docDate.value)\r\n\r\n    if (!this.getCustomer.touched || !this.getCustomer.dirty) {\r\n      this.form.controls.customer.setValue(this.customer.customerName!)\r\n    }\r\n    if ((!this.getDocDate.touched || !this.getDocDate.dirty) && this.getDocDate.value != '') {\r\n      this.form.controls.docDate.setValue(formatDate(this.return.docDate!, 'yyyy-MM-dd', this.locale))\r\n    }\r\n    if (!this.getDocDate.touched || !this.getDocDate.dirty && this.getDocDate.value == null) {\r\n      this.form.controls.docDate.setValue(this.return.docDate!)\r\n    }\r\n    if (!this.getProduct.touched || !this.getProduct.dirty) {\r\n      this.form.controls.product.setValue(this.product.productName!)\r\n    }\r\n    if (!this.getQtyOnDoc.touched || !this.getQtyOnDoc.dirty) {\r\n      this.form.controls.qtyOnDoc.setValue(this.return.qtyOnDoc!)\r\n    }\r\n    if ((!this.getBatchDate.touched || !this.getBatchDate.dirty) && this.getBatchDate.value != null) {\r\n      this.form.controls.batchDate.setValue(formatDate(this.return.batchDate!, 'yyyy-MM-dd', this.locale))\r\n    }\r\n    if (!this.getBatchDate.touched || !this.getBatchDate.dirty && this.getBatchDate.value == null) {\r\n      this.form.controls.batchDate.setValue(this.return.batchDate!)\r\n    }\r\n    if (!this.getOwner.touched || !this.getOwner.dirty) {\r\n      this.form.controls.owner.setValue(this.owner.firstName!)\r\n    }\r\n    if (!this.getFault.touched || !this.getFault.dirty) {\r\n      this.form.controls.fault.setValue(this.fault.name!)\r\n    }\r\n    if (!this.getDocNo.touched || !this.getDocNo.dirty) {\r\n      this.form.controls.docNo.setValue(this.return.docNo!)\r\n    }\r\n    if (!this.getQtyReturned.touched || !this.getQtyReturned.dirty) {\r\n      this.form.controls.qtyReturned.setValue(this.return.qtyReturned!)\r\n    }\r\n    if (!this.getResolved.touched || !this.getResolved.dirty) {\r\n      this.form.controls.resolved.setValue(this.return.resolved!)\r\n    }\r\n    if (!this.getComment.touched || !this.getComment.dirty) {\r\n      this.form.controls.comment.setValue(this.return.comment!)\r\n    }\r\n\r\n\r\n    //Conver objects to id's\r\n    let editedReturn: ReturnRm = {\r\n      id: this.returnId,\r\n      docDate: this.form.controls.docDate.value!,\r\n      customerId: this.form.controls.customer.value!,\r\n      productId: this.form.controls.product.value!,\r\n      qtyOnDoc: this.form.controls.qtyOnDoc.value!,\r\n      batchDate: this.form.controls.batchDate.value!,\r\n      ownerId: this.form.controls.owner.value!,\r\n      faultId: this.form.controls.fault.value!,\r\n      docNo: this.form.controls.docNo.value!,\r\n      qtyReturned: this.form.controls.qtyReturned.value!,\r\n      resolved: this.form.controls.resolved.value!,\r\n      comment: this.form.controls.comment.value!\r\n\r\n    }\r\n\r\n\r\n    if (this.form.invalid) {\r\n      //this.form.markAllAsTouched();\r\n      return\r\n    }\r\n    if (this.form.valid && this.form.dirty && this.form.touched) {\r\n      this.message = 'Return updated successfully'\r\n      this.showToast = true\r\n    }\r\n    else if (this.form.valid && !this.form.touched && !this.form.dirty) {\r\n      this.message = 'Nothing updated'\r\n      this.showToast = true\r\n    }\r\n  \r\n    this.returnService.updateReturnReturn({ id: this.returnId, body: editedReturn }).subscribe(_ => { this.appService.setMessage(this.message); this.appService.showToast(this.showToast)},this.handleError)\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  //getters\r\n  get getDocDate() {\r\n    return this.form.controls.docDate\r\n  }\r\n\r\n  get getCustomer() {\r\n    return this.form.controls.customer\r\n  }\r\n\r\n  get getProduct() {\r\n    return this.form.controls.product\r\n  }\r\n\r\n  get getQtyOnDoc() {\r\n    return this.form.controls.qtyOnDoc\r\n  }\r\n\r\n  get getBatchDate() {\r\n    return this.form.controls.batchDate\r\n  }\r\n\r\n  get getOwner() {\r\n    return this.form.controls.owner\r\n  }\r\n\r\n  get getFault() {\r\n    return this.form.controls.fault\r\n  }\r\n\r\n  get getDocNo() {\r\n    return this.form.controls.docNo\r\n  }\r\n\r\n  get getQtyReturned() {\r\n    return this.form.controls.qtyReturned\r\n  }\r\n\r\n  get getResolved() {\r\n    return this.form.controls.resolved\r\n  }\r\n\r\n  get getComment() {\r\n    return this.form.controls.comment\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}