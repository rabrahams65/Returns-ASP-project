{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api/services\";\nexport class AuthService {\n  constructor(userService) {\n    this.userService = userService;\n    this.loginUser = user => {\n      this.currentUser = user;\n      this.findUser(this.currentUser);\n    };\n  }\n  findUser(user) {\n    this.userService.findUser({\n      email: user.email\n    }).subscribe(u => {\n      this.userId = u.id;\n      console.log('The user id is: ' + u.id);\n    });\n  }\n}\n_class = AuthService;\n_class.ɵfac = function AuthService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.UserService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAMA,OAAM,MAAOA,WAAW;EAEtBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAK/B,cAAS,GAAIC,IAAU,IAAI;MACzB,IAAI,CAACC,WAAW,GAAGD,IAAI;MACvB,IAAI,CAACE,QAAQ,CAAC,IAAI,CAACD,WAAW,CAAC;IAGjC,CAAC;EAV+C;EAYhDC,QAAQ,CAACF,IAAU;IACjB,IAAI,CAACD,WAAW,CAACG,QAAQ,CAAC;MAAEC,KAAK,EAAEH,IAAI,CAACG;IAAK,CAAE,CAAC,CAACC,SAAS,CAACC,CAAC,IAAG;MAAG,IAAI,CAACC,MAAM,GAAGD,CAAC,CAACE,EAAE;MAAEC,OAAO,CAACC,GAAG,CAAC,kBAAkB,GAAGJ,CAAC,CAACE,EAAE,CAAC;IAAC,CAAC,CAAE;EAClI;;SAhBWV,WAAW;;mBAAXA,MAAW;AAAA;;SAAXA,MAAW;EAAAa,SAAXb,MAAW;EAAAc,YAFV;AAAM","names":["AuthService","constructor","userService","user","currentUser","findUser","email","subscribe","u","userId","id","console","log","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Rowan\\source\\repos\\Returns-ASP-project\\Returns-ASP-project\\ClientApp\\src\\app\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { UserService } from '../api/services';\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(private userService: UserService) { }\n\n  currentUser?: User\n  userId? : string\n\n  loginUser = (user: User) => {\n    this.currentUser = user\r\n    this.findUser(this.currentUser)\r\n\r\n   \r\n  }\n\n  findUser(user: User) {\n    this.userService.findUser({ email: user.email }).subscribe(u => { this.userId = u.id; console.log('The user id is: ' + u.id) } )\r\n  }\n}\n\n\ninterface User {\n  email: string\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}