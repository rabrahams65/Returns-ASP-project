{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject, LOCALE_ID, ViewChild } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged, filter, map } from 'rxjs';\nlet ReturnDetailComponent = class ReturnDetailComponent {\n  //form: FormGroup;\n  constructor(route, returnService, router, authService, fb, locale, appService, userService, customerService, productService, faultService, ownerService) {\n    this.route = route;\n    this.returnService = returnService;\n    this.router = router;\n    this.authService = authService;\n    this.fb = fb;\n    this.locale = locale;\n    this.appService = appService;\n    this.userService = userService;\n    this.customerService = customerService;\n    this.productService = productService;\n    this.faultService = faultService;\n    this.ownerService = ownerService;\n    this.notFound = 'Not Found';\n    this.notLoaded = 'Not Loaded';\n    this.returnId = this.notLoaded;\n    this.batchDateDisable = false;\n    this.modelInUse = 'none';\n    this.return = {};\n    this.customer = {};\n    this.product = {};\n    this.fault = {};\n    this.owner = {};\n    this.custIdFromTemplate = '';\n    this.prodIdFromTemplate = '';\n    this.faultIdFromTemplate = '';\n    this.ownerIdFromTemplate = '';\n    this.customerList = [];\n    this.productList = [];\n    this.faultList = [];\n    this.ownerList = [];\n    this.message = 'Something went wrong...';\n    this.showToast = false;\n    this.userId = this.notLoaded;\n    this.form = this.fb.group({\n      customer: ['', Validators.required],\n      product: ['', Validators.required],\n      qtyOnDoc: [0],\n      qtyReturned: [0],\n      batchDate: [''],\n      owner: [''],\n      fault: [''],\n      docNo: ['', Validators.required],\n      docDate: ['', Validators.required],\n      resolved: [true],\n      comment: ['']\n    });\n    this.custFormatter = customer => customer.customerName;\n    this.prodFormatter = product => product.productName;\n    this.faultFormatter = fault => fault.name;\n    this.ownerFormatter = owner => owner.firstName;\n    //Gets all customers for searchbox\n    this.searchCust = text$ => {\n      this.customerService.searchCustomer().subscribe(c => this.customerList = c, this.handleError);\n      return text$.pipe(debounceTime(200), distinctUntilChanged(), filter(term => term.length >= 2), map(term => this.customerList.filter(customer => new RegExp(term, 'mi').test(customer.customerName)).slice(0, 10)));\n    };\n    //Gets all products for searchbox\n    this.searchProd = text$ => {\n      this.productService.searchProduct().subscribe(p => this.productList = p, this.handleError);\n      return text$.pipe(debounceTime(200), distinctUntilChanged(), filter(term => term.length >= 2), map(term => this.productList.filter(product => new RegExp(term, 'mi').test(product.productName)).slice(0, 10)));\n    };\n    //Gets all faults for searchbox\n    this.searchFault = text$ => {\n      this.faultService.searchFault().subscribe(f => this.faultList = f, this.handleError);\n      return text$.pipe(debounceTime(200), distinctUntilChanged(), filter(term => term.length >= 2), map(term => this.faultList.filter(fault => new RegExp(term, 'mi').test(fault.name)).slice(0, 10)));\n    };\n    //Gets all owners for searchbox\n    this.searchOwner = text$ => {\n      this.ownerService.searchOwner().subscribe(o => this.ownerList = o, this.handleError);\n      return text$.pipe(debounceTime(200), distinctUntilChanged(), filter(term => term.length >= 2), map(term => this.ownerList.filter(owner => new RegExp(term, 'mi').test(owner.firstName)).slice(0, 10)));\n    };\n    this.getUserId = userId => {\n      this.userId = userId;\n    };\n    this.findReturn = returnId => {\n      this.returnId = returnId ?? 'not passed';\n      this.returnService.findReturn({\n        id: this.returnId\n      }).subscribe(r => {\n        this.return = r;\n        this.customerService.findCustomer({\n          id: r.customerId\n        }).subscribe(c => {\n          this.setCustomerName(c);\n          this.custIdFromTemplate = c.id;\n        }, this.handleError);\n        this.productService.findProduct({\n          id: r.productId\n        }).subscribe(p => {\n          this.setProductName(p);\n          this.prodIdFromTemplate = p.id;\n        }, this.handleError);\n        this.faultService.findFault({\n          id: r.faultId\n        }).subscribe(f => {\n          this.setFaultName(f);\n          this.faultIdFromTemplate = f.id;\n        }, this.handleError);\n        this.ownerService.findOwner({\n          id: r.ownerId\n        }).subscribe(o => {\n          this.setOwnerName(o);\n          this.ownerIdFromTemplate = o.id;\n        }, this.handleError);\n        //this.userService.findUser({ }) set up endpoint to find user by Id as well\n      }, this.handleError);\n    };\n    this.handleError = err => {\n      if (err.status == 404) {\n        this.router.navigate(['/search-returns']);\n      }\n      console.log(\"Response Error. Status: \", err.status);\n      console.log(\"Response Error. Status: \", err.statusText);\n      console.log(err);\n    };\n  }\n  ngAfterViewInit() {}\n  ngOnInit() {\n    if (!this.authService.currentUser) {\n      this.router.navigate(['/register-user']);\n    }\n    this.userService.findUser({\n      email: this.authService.currentUser?.email\n    }).subscribe(u => {\n      this.getUserId(u.id);\n      console.log('The user id in the oninit subscribe call is: ' + this.userId);\n    });\n    this.route.paramMap.subscribe(p => this.findReturn(p.get(\"returnId\")));\n    console.log('OnInit userEmail = ' + this.authService.currentUser?.email);\n  }\n  toggleBatch() {\n    this.batchDateDisable = !this.batchDateDisable;\n    if (this.batchDateDisable == true && this.return.batchDate?.length > 1) {\n      this.form.controls['batchDate'].disable();\n      this.form.controls.batchDate.setValue(null);\n    } else if (this.batchDateDisable == false && this.return.batchDate?.length > 1) {\n      this.form.controls['batchDate'].enable();\n    } else if (this.batchDateDisable == true) {\n      this.form.controls['batchDate'].enable();\n      this.form.controls.batchDate.setValue(null);\n    } else if (this.batchDateDisable == false) {\n      this.form.controls['batchDate'].disable();\n    }\n  }\n  //Gets the id and name of the model in the search criteria\n  getModel(modelName, type) {\n    let modelFound = [];\n    //Get the type of model\n    if (type == 'customerType') {\n      let customerFound = this.customerList.filter(c => c.customerName == modelName);\n      console.log(customerFound.length);\n      if (customerFound.length > 0) {\n        customerFound.map(c => {\n          this.custIdFromTemplate = c.id;\n          this.customer.customerName = c.customerName;\n        });\n      } else {\n        this.custIdFromTemplate = this.notFound;\n      }\n    }\n    if (type == 'productType') {\n      let productFound = this.productList.filter(p => p.productName == modelName);\n      if (productFound.length > 0) {\n        productFound.map(p => {\n          this.prodIdFromTemplate = p.id;\n          this.product.productName = p.productName;\n        });\n      } else {\n        this.prodIdFromTemplate = 'Not Found';\n      }\n    }\n    if (type == 'faultType') {\n      let faultFound = this.faultList.filter(f => f.name == modelName);\n      if (faultFound.length > 0) {\n        faultFound.map(f => {\n          this.faultIdFromTemplate = f.id;\n          this.fault.name = f.name;\n        });\n      } else {\n        this.faultIdFromTemplate = 'Not Found';\n      }\n    }\n    if (type == 'ownerType') {\n      let ownerFound = this.ownerList.filter(o => o.firstName == modelName);\n      if (ownerFound.length > 0) {\n        ownerFound.map(o => {\n          this.ownerIdFromTemplate = o.id;\n          this.owner.firstName = o.firstName;\n        });\n      } else {\n        this.ownerIdFromTemplate = 'Not Found';\n      }\n    }\n  }\n  //Sets values upon initilization\n  setCustomerName(customer) {\n    this.customer = customer;\n  }\n  setProductName(product) {\n    this.product = product;\n  }\n  setFaultName(fault) {\n    this.fault = fault;\n  }\n  setOwnerName(owner) {\n    this.owner = owner;\n  }\n  //Get by Id's\n  //private getCustomerIdByName(customerName: string): string {\n  //  let customer = 'Not found'\n  //  this.customerService.findByNameCustomer({ name: customerName }).subscribe(c => customerName = c.customerName!)\n  //  return customer\n  //}\n  update() {\n    //console.log(this.batchDate.value + ' ' + this.docDate.value)\n    //if (!this.getCustomer.touched || !this.getCustomer.dirty) {\n    //  this.form.controls.customer.setValue(this.customer.customerName!)\n    //}\n    //if ((!this.getDocDate.touched || !this.getDocDate.dirty) && this.getDocDate.value != '') {\n    //  this.form.controls.docDate.setValue(formatDate(this.return.docDate!, 'yyyy-MM-dd', this.locale))\n    //}\n    //if (!this.getDocDate.touched || !this.getDocDate.dirty && this.getDocDate.value == null) {\n    //  this.form.controls.docDate.setValue(this.return.docDate!)\n    //}\n    //if (!this.getProduct.touched || !this.getProduct.dirty) {\n    //  this.form.controls.product.setValue(this.product.productName!)\n    //}\n    //if (!this.getQtyOnDoc.touched || !this.getQtyOnDoc.dirty) {\n    //  this.form.controls.qtyOnDoc.setValue(this.return.qtyOnDoc!)\n    //}\n    //if ((!this.getBatchDate.touched || !this.getBatchDate.dirty) && this.getBatchDate.value != null) {\n    //  this.form.controls.batchDate.setValue(formatDate(this.return.batchDate!, 'yyyy-MM-dd', this.locale))\n    //}\n    //if (!this.getBatchDate.touched || !this.getBatchDate.dirty && this.getBatchDate.value == null) {\n    //  this.form.controls.batchDate.setValue(this.return.batchDate!)\n    //}\n    //if (!this.getOwner.touched || !this.getOwner.dirty) {\n    //  this.form.controls.owner.setValue(this.owner.firstName!)\n    //}\n    //if (!this.getFault.touched || !this.getFault.dirty) {\n    //  this.form.controls.fault.setValue(this.fault.name!)\n    //}\n    //if (!this.getDocNo.touched || !this.getDocNo.dirty) {\n    //  this.form.controls.docNo.setValue(this.return.docNo!)\n    //}\n    //if (!this.getQtyReturned.touched || !this.getQtyReturned.dirty) {\n    //  this.form.controls.qtyReturned.setValue(this.return.qtyReturned!)\n    //}\n    //if (!this.getResolved.touched || !this.getResolved.dirty) {\n    //  this.form.controls.resolved.setValue(this.return.resolved!)\n    //}\n    //if (!this.getComment.touched || !this.getComment.dirty) {\n    //  this.form.controls.comment.setValue(this.return.comment!)\n    //}\n    if (this.form.invalid || this.getCustomer.value == this.notFound || this.getProduct.value == this.notFound || this.getFault.value == this.notFound || this.getOwner.value == this.notFound) {\n      console.log('The form is invalidd');\n      return;\n    }\n    console.log('The user id in the update function is: ' + this.userId);\n    //Convert objects to id's\n    let editedReturn = {\n      id: this.returnId,\n      docDate: this.form.controls.docDate.value,\n      customerId: this.custIdFromTemplate,\n      productId: this.prodIdFromTemplate,\n      qtyOnDoc: this.form.controls.qtyOnDoc.value,\n      batchDate: this.form.controls.batchDate.value,\n      ownerId: this.ownerIdFromTemplate,\n      faultId: this.faultIdFromTemplate,\n      docNo: this.form.controls.docNo.value,\n      qtyReturned: this.form.controls.qtyReturned.value,\n      resolved: this.form.controls.resolved.value,\n      comment: this.form.controls.comment.value,\n      userId: this.userId\n    };\n    this.showToast = true;\n    if (this.form.valid && this.form.dirty && this.form.touched) {\n      this.message = 'Return updated successfully';\n      console.log('Form Valid: ' + this.form.valid);\n      console.log('Form Touched: ' + this.form.touched);\n      console.log('Form Dirty: ' + this.form.dirty);\n    } else if (this.form.valid && !this.form.touched && !this.form.dirty) {\n      console.log('Form Valid: ' + this.form.valid);\n      console.log('Form Touched: ' + this.form.touched);\n      console.log('Form Dirty: ' + this.form.dirty);\n      this.message = 'Nothing updated';\n    }\n    this.returnService.updateReturnReturn({\n      id: this.returnId,\n      body: editedReturn\n    }).subscribe(_ => {\n      this.appService.setMessage(this.message);\n      this.appService.showToast(this.showToast);\n    }, this.handleError);\n    this.router.navigate(['/']);\n  }\n  //getters\n  get getDocDate() {\n    return this.form.controls.docDate;\n  }\n  get getCustomer() {\n    return this.form.controls.customer;\n  }\n  get getProduct() {\n    return this.form.controls.product;\n  }\n  get getQtyOnDoc() {\n    return this.form.controls.qtyOnDoc;\n  }\n  get getBatchDate() {\n    return this.form.controls.batchDate;\n  }\n  get getOwner() {\n    return this.form.controls.owner;\n  }\n  get getFault() {\n    return this.form.controls.fault;\n  }\n  get getDocNo() {\n    return this.form.controls.docNo;\n  }\n  get getQtyReturned() {\n    return this.form.controls.qtyReturned;\n  }\n  get getResolved() {\n    return this.form.controls.resolved;\n  }\n  get getComment() {\n    return this.form.controls.comment;\n  }\n};\n__decorate([ViewChild('resolvedDropdown', {\n  static: true\n})], ReturnDetailComponent.prototype, \"resolvedDropdownRef\", void 0);\nReturnDetailComponent = __decorate([Component({\n  selector: 'app-return-detail',\n  templateUrl: './return-detail.component.html',\n  styleUrls: ['./return-detail.component.css']\n}), __param(5, Inject(LOCALE_ID))], ReturnDetailComponent);\nexport { ReturnDetailComponent };","map":{"version":3,"mappings":"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","names":["Component","Inject","LOCALE_ID","ViewChild","Validators","debounceTime","distinctUntilChanged","filter","map","ReturnDetailComponent","constructor","route","returnService","router","authService","fb","locale","appService","userService","customerService","productService","faultService","ownerService","notLoaded","group","customer","required","product","qtyOnDoc","qtyReturned","batchDate","owner","fault","docNo","docDate","resolved","comment","customerName","productName","name","firstName","text$","searchCustomer","subscribe","c","customerList","handleError","pipe","term","length","RegExp","test","slice","searchProduct","p","productList","searchFault","f","faultList","searchOwner","o","ownerList","userId","returnId","findReturn","id","r","return","findCustomer","customerId","setCustomerName","custIdFromTemplate","findProduct","productId","setProductName","prodIdFromTemplate","findFault","faultId","setFaultName","faultIdFromTemplate","findOwner","ownerId","setOwnerName","ownerIdFromTemplate","err","status","navigate","console","log","statusText","ngAfterViewInit","ngOnInit","currentUser","findUser","email","u","getUserId","paramMap","get","toggleBatch","batchDateDisable","form","controls","disable","setValue","enable","getModel","modelName","type","modelFound","customerFound","notFound","productFound","faultFound","ownerFound","update","invalid","getCustomer","value","getProduct","getFault","getOwner","editedReturn","showToast","valid","dirty","touched","message","updateReturnReturn","body","_","setMessage","getDocDate","getQtyOnDoc","getBatchDate","getDocNo","getQtyReturned","getResolved","getComment","__decorate","static","selector","templateUrl","styleUrls","__param"],"sourceRoot":"","sources":["C:\\Users\\Rowan\\source\\repos\\Returns-ASP-project\\Returns-ASP-project\\ClientApp\\src\\app\\return-detail\\return-detail.component.ts"],"sourcesContent":["import { formatDate } from '@angular/common';\r\nimport { AfterViewInit, Component, ElementRef, Inject, LOCALE_ID, OnInit, ViewChild } from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { CustomerRm, FaultRm, OwnerRm, ProductRm, ReturnDto } from '../api/models';\r\nimport { ReturnRm } from '../api/models/return-rm';\r\nimport { CustomerService, FaultService, OwnerService, ProductService, ReturnService, UserService } from '../api/services';\r\nimport { AuthService } from '../auth/auth.service';\r\nimport { AppService } from '../app.service';\r\nimport { debounceTime, distinctUntilChanged, filter, map, Observable, OperatorFunction } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-return-detail',\r\n  templateUrl: './return-detail.component.html',\r\n  styleUrls: ['./return-detail.component.css']\r\n})\r\nexport class ReturnDetailComponent implements OnInit, AfterViewInit {\r\n  @ViewChild('resolvedDropdown', { static: true }) resolvedDropdownRef?: ElementRef<HTMLElement>;\r\n  //form: FormGroup;\r\n\r\n  constructor(private route: ActivatedRoute, private returnService: ReturnService, private router: Router, private authService: AuthService,\r\n    private fb: FormBuilder, @Inject(LOCALE_ID) private locale: string, private appService: AppService, private userService: UserService, private customerService: CustomerService,\r\n    private productService: ProductService, private faultService: FaultService, private ownerService: OwnerService) {\r\n\r\n}\r\n\r\n  ngAfterViewInit() {\r\n\r\n  }\r\n\r\n  notFound = 'Not Found'\r\n  notLoaded = 'Not Loaded'\r\n\r\n  returnId: string = this.notLoaded\r\n  batchDateDisable = false\r\n  modelInUse = 'none'\r\n  return: ReturnRm = {}\r\n  customer: CustomerRm = {}\r\n  product: ProductRm = {}\r\n  fault: FaultRm = {}\r\n  owner: OwnerRm = {}\r\n  custIdFromTemplate = ''\r\n  prodIdFromTemplate = ''\r\n  faultIdFromTemplate = ''\r\n  ownerIdFromTemplate = ''\r\n\r\n  customerList: CustomerRm[] = []\r\n  productList: ProductRm[] = []\r\n  faultList: FaultRm[] = []\r\n  ownerList: OwnerRm[] = []\r\n\r\n  message = 'Something went wrong...'\r\n  showToast = false;\r\n  userId = this.notLoaded\r\n\r\n\r\n  form = this.fb.group({\r\n    customer: ['', Validators.required],\r\n    product: ['', Validators.required],\r\n    qtyOnDoc: [0],\r\n    qtyReturned: [0],\r\n    batchDate: [''],\r\n    owner: [''],\r\n    fault: [''],\r\n    docNo: ['', Validators.required],\r\n    docDate: ['', Validators.required],\r\n    resolved: [true],\r\n    comment: ['']\r\n  })\r\n\r\n  custFormatter = (customer: CustomerRm) => customer.customerName!\r\n  prodFormatter = (product: ProductRm) => product.productName!\r\n  faultFormatter = (fault: FaultRm) => fault.name!\r\n  ownerFormatter = (owner: OwnerRm) => owner.firstName!\r\n\r\n  //Gets all customers for searchbox\r\n  searchCust: OperatorFunction<string, readonly { id?: string | undefined | null; name?: string | undefined | null }[]> = (text$: Observable<string>) => {\r\n    this.customerService.searchCustomer().subscribe(c => this.customerList = c, this.handleError)\r\n\r\n    return text$.pipe(\r\n          debounceTime(200),\r\n          distinctUntilChanged(),\r\n          filter((term) => term.length >= 2),\r\n          map((term) => this.customerList.filter((customer) => new RegExp(term, 'mi').test(customer.customerName!)).slice(0, 10))\r\n      );\r\n  }\r\n\r\n  //Gets all products for searchbox\r\n  searchProd: OperatorFunction<string, readonly { id?: string | undefined | null; name?: string | undefined | null }[]> = (text$: Observable<string>) => {\r\n    this.productService.searchProduct().subscribe(p => this.productList = p, this.handleError)\r\n\r\n    return text$.pipe(\r\n      debounceTime(200),\r\n      distinctUntilChanged(),\r\n      filter((term) => term.length >= 2),\r\n      map((term) => this.productList.filter((product) => new RegExp(term, 'mi').test(product.productName!)).slice(0, 10))\r\n    );\r\n  }\r\n\r\n  //Gets all faults for searchbox\r\n  searchFault: OperatorFunction<string, readonly { id?: string | undefined | null; name?: string | undefined | null }[]> = (text$: Observable<string>) => {\r\n    this.faultService.searchFault().subscribe(f => this.faultList = f, this.handleError)\r\n\r\n    return text$.pipe(\r\n      debounceTime(200),\r\n      distinctUntilChanged(),\r\n      filter((term) => term.length >= 2),\r\n      map((term) => this.faultList.filter((fault) => new RegExp(term, 'mi').test(fault.name!)).slice(0, 10))\r\n    );\r\n  }\r\n\r\n  //Gets all owners for searchbox\r\n  searchOwner: OperatorFunction<string, readonly { id?: string | undefined | null; name?: string | undefined | null }[]> = (text$: Observable<string>) => {\r\n    this.ownerService.searchOwner().subscribe(o => this.ownerList = o, this.handleError)\r\n\r\n    return text$.pipe(\r\n      debounceTime(200),\r\n      distinctUntilChanged(),\r\n      filter((term) => term.length >= 2),\r\n      map((term) => this.ownerList.filter((owner) => new RegExp(term, 'mi').test(owner.firstName!)).slice(0, 10))\r\n    );\r\n  }\r\n\r\n\r\n  ngOnInit(): void {\r\n\r\n    if (!this.authService.currentUser) {\r\n      this.router.navigate(['/register-user'])\r\n    }\r\n\r\n    this.userService.findUser({ email: this.authService.currentUser?.email! }).subscribe(u => {\r\n      this.getUserId(u.id!); console.log('The user id in the oninit subscribe call is: ' + this.userId)\r\n    })\r\n\r\n    this.route.paramMap.subscribe(p => this.findReturn(p.get(\"returnId\")));\r\n\r\n    console.log('OnInit userEmail = ' + this.authService.currentUser?.email!)\r\n\r\n    \r\n  }\r\n\r\n  private getUserId = (userId : string)=> {\r\n    this.userId = userId\r\n  }\r\n  \r\n  private findReturn = (returnId: string | null) => {\r\n    this.returnId = returnId ?? 'not passed';\r\n\r\n    this.returnService.findReturn({ id: this.returnId }).subscribe(r =>\r\n    {\r\n      this.return = r\r\n      this.customerService.findCustomer({ id: r.customerId! }).subscribe(c => { this.setCustomerName(c); this.custIdFromTemplate = c.id! }, this.handleError)\r\n      this.productService.findProduct({ id: r.productId! }).subscribe(p => { this.setProductName(p); this.prodIdFromTemplate = p.id! }, this.handleError)\r\n      this.faultService.findFault({ id: r.faultId! }).subscribe(f => { this.setFaultName(f); this.faultIdFromTemplate = f.id! }, this.handleError)\r\n      this.ownerService.findOwner({ id: r.ownerId! }).subscribe(o => { this.setOwnerName(o); this.ownerIdFromTemplate = o.id! }, this.handleError)\r\n      //this.userService.findUser({ }) set up endpoint to find user by Id as well\r\n    }\r\n      , this.handleError);\r\n  }\r\n\r\n  toggleBatch() {\r\n    this.batchDateDisable = !this.batchDateDisable;\r\n\r\n    if (this.batchDateDisable == true && this.return.batchDate?.length! > 1) {\r\n      this.form.controls['batchDate'].disable()\r\n      this.form.controls.batchDate.setValue(null)\r\n    }\r\n    else if (this.batchDateDisable == false && this.return.batchDate?.length! > 1) {\r\n      this.form.controls['batchDate'].enable()\r\n    }\r\n    else if (this.batchDateDisable == true ) {\r\n      this.form.controls['batchDate'].enable()\r\n      this.form.controls.batchDate.setValue(null)\r\n    }\r\n    else if (this.batchDateDisable == false) {\r\n      this.form.controls['batchDate'].disable()\r\n    }\r\n  }\r\n\r\n  //Gets the id and name of the model in the search criteria\r\n  getModel(modelName: string, type: string) {\r\n    let modelFound: any[] = []\r\n\r\n    //Get the type of model\r\n    if (type == 'customerType') {\r\n      let customerFound = this.customerList.filter(c => c.customerName == modelName)\r\n      console.log(customerFound.length)\r\n      if (customerFound.length > 0) {\r\n        customerFound.map(c => { this.custIdFromTemplate = c.id!; this.customer.customerName = c.customerName! })\r\n      }\r\n      else {\r\n        this.custIdFromTemplate = this.notFound\r\n      }\r\n    }\r\n\r\n    if (type == 'productType') {\r\n      let productFound = this.productList.filter(p => p.productName == modelName)\r\n      if (productFound.length > 0) {\r\n        productFound.map(p => { this.prodIdFromTemplate = p.id!; this.product.productName = p.productName! })\r\n      }\r\n      else {\r\n        this.prodIdFromTemplate = 'Not Found'\r\n      }\r\n    }\r\n    if (type == 'faultType') {\r\n      let faultFound = this.faultList.filter(f => f.name == modelName)\r\n      if (faultFound.length > 0) {\r\n        faultFound.map(f => { this.faultIdFromTemplate = f.id!; this.fault.name = f.name! })\r\n      }\r\n      else {\r\n        this.faultIdFromTemplate = 'Not Found'\r\n      }\r\n    }\r\n    if (type == 'ownerType') {\r\n      let ownerFound = this.ownerList.filter(o => o.firstName == modelName)\r\n      if (ownerFound.length > 0) {\r\n        ownerFound.map(o => { this.ownerIdFromTemplate = o.id!; this.owner.firstName = o.firstName! })\r\n      }\r\n      else {\r\n        this.ownerIdFromTemplate = 'Not Found'\r\n      }\r\n    }\r\n    \r\n\r\n  }\r\n\r\n  private handleError = (err: any) => {\r\n\r\n    if (err.status == 404) {\r\n      this.router.navigate(['/search-returns'])\r\n    }\r\n      \r\n    console.log(\"Response Error. Status: \", err.status)\r\n    console.log(\"Response Error. Status: \", err.statusText)\r\n    console.log(err);\r\n  }\r\n\r\n  //Sets values upon initilization\r\n\r\n  private setCustomerName(customer: CustomerRm) {\r\n    this.customer = customer\r\n  }\r\n\r\n  private setProductName(product: ProductRm) {\r\n    this.product = product\r\n  }\r\n\r\n  private setFaultName(fault: FaultRm) {\r\n   this.fault = fault\r\n  }\r\n\r\n  private setOwnerName(owner: OwnerRm) {\r\n    this.owner = owner\r\n  }\r\n\r\n  //Get by Id's\r\n  //private getCustomerIdByName(customerName: string): string {\r\n  //  let customer = 'Not found'\r\n  //  this.customerService.findByNameCustomer({ name: customerName }).subscribe(c => customerName = c.customerName!)\r\n  //  return customer\r\n  //}\r\n\r\n  update() {\r\n\r\n\r\n\r\n    //console.log(this.batchDate.value + ' ' + this.docDate.value)\r\n\r\n    //if (!this.getCustomer.touched || !this.getCustomer.dirty) {\r\n    //  this.form.controls.customer.setValue(this.customer.customerName!)\r\n    //}\r\n    //if ((!this.getDocDate.touched || !this.getDocDate.dirty) && this.getDocDate.value != '') {\r\n    //  this.form.controls.docDate.setValue(formatDate(this.return.docDate!, 'yyyy-MM-dd', this.locale))\r\n    //}\r\n    //if (!this.getDocDate.touched || !this.getDocDate.dirty && this.getDocDate.value == null) {\r\n    //  this.form.controls.docDate.setValue(this.return.docDate!)\r\n    //}\r\n    //if (!this.getProduct.touched || !this.getProduct.dirty) {\r\n    //  this.form.controls.product.setValue(this.product.productName!)\r\n    //}\r\n    //if (!this.getQtyOnDoc.touched || !this.getQtyOnDoc.dirty) {\r\n    //  this.form.controls.qtyOnDoc.setValue(this.return.qtyOnDoc!)\r\n    //}\r\n    //if ((!this.getBatchDate.touched || !this.getBatchDate.dirty) && this.getBatchDate.value != null) {\r\n    //  this.form.controls.batchDate.setValue(formatDate(this.return.batchDate!, 'yyyy-MM-dd', this.locale))\r\n    //}\r\n    //if (!this.getBatchDate.touched || !this.getBatchDate.dirty && this.getBatchDate.value == null) {\r\n    //  this.form.controls.batchDate.setValue(this.return.batchDate!)\r\n    //}\r\n    //if (!this.getOwner.touched || !this.getOwner.dirty) {\r\n    //  this.form.controls.owner.setValue(this.owner.firstName!)\r\n    //}\r\n    //if (!this.getFault.touched || !this.getFault.dirty) {\r\n    //  this.form.controls.fault.setValue(this.fault.name!)\r\n    //}\r\n    //if (!this.getDocNo.touched || !this.getDocNo.dirty) {\r\n    //  this.form.controls.docNo.setValue(this.return.docNo!)\r\n    //}\r\n    //if (!this.getQtyReturned.touched || !this.getQtyReturned.dirty) {\r\n    //  this.form.controls.qtyReturned.setValue(this.return.qtyReturned!)\r\n    //}\r\n    //if (!this.getResolved.touched || !this.getResolved.dirty) {\r\n    //  this.form.controls.resolved.setValue(this.return.resolved!)\r\n    //}\r\n    //if (!this.getComment.touched || !this.getComment.dirty) {\r\n    //  this.form.controls.comment.setValue(this.return.comment!)\r\n    //}\r\n\r\n    if (this.form.invalid || this.getCustomer.value == this.notFound || this.getProduct.value == this.notFound || this.getFault.value == this.notFound || this.getOwner.value == this.notFound) {\r\n      console.log('The form is invalidd')\r\n      return\r\n    }\r\n\r\n    console.log('The user id in the update function is: ' + this.userId)\r\n    //Convert objects to id's\r\n    let editedReturn: ReturnRm = {\r\n      id: this.returnId,\r\n      docDate: this.form.controls.docDate.value!,\r\n      customerId: this.custIdFromTemplate!,\r\n      productId: this.prodIdFromTemplate!,\r\n      qtyOnDoc: this.form.controls.qtyOnDoc.value!,\r\n      batchDate: this.form.controls.batchDate.value!,\r\n      ownerId: this.ownerIdFromTemplate!,\r\n      faultId: this.faultIdFromTemplate!,\r\n      docNo: this.form.controls.docNo.value!,\r\n      qtyReturned: this.form.controls.qtyReturned.value!,\r\n      resolved: this.form.controls.resolved.value!,\r\n      comment: this.form.controls.comment.value!,\r\n      userId: this.userId!\r\n\r\n    }\r\n\r\n\r\n    \r\n    this.showToast = true\r\n    if (this.form.valid && this.form.dirty && this.form.touched) {\r\n      this.message = 'Return updated successfully'\r\n      console.log('Form Valid: ' + this.form.valid)\r\n      console.log('Form Touched: ' + this.form.touched)\r\n      console.log('Form Dirty: ' + this.form.dirty)\r\n    }\r\n    else if (this.form.valid && !this.form.touched && !this.form.dirty) {\r\n      console.log('Form Valid: ' + this.form.valid)\r\n      console.log('Form Touched: ' + this.form.touched)\r\n      console.log('Form Dirty: ' + this.form.dirty)\r\n      this.message = 'Nothing updated'\r\n    }\r\n  \r\n    this.returnService.updateReturnReturn({ id: this.returnId, body: editedReturn }).subscribe(_ => { this.appService.setMessage(this.message); this.appService.showToast(this.showToast)},this.handleError)\r\n    this.router.navigate(['/']);\r\n  }\r\n\r\n  //getters\r\n  get getDocDate() {\r\n    return this.form.controls.docDate\r\n  }\r\n\r\n  get getCustomer() {\r\n    return this.form.controls.customer\r\n  }\r\n\r\n  get getProduct() {\r\n    return this.form.controls.product\r\n  }\r\n\r\n  get getQtyOnDoc() {\r\n    return this.form.controls.qtyOnDoc\r\n  }\r\n\r\n  get getBatchDate() {\r\n    return this.form.controls.batchDate\r\n  }\r\n\r\n  get getOwner() {\r\n    return this.form.controls.owner\r\n  }\r\n\r\n  get getFault() {\r\n    return this.form.controls.fault\r\n  }\r\n\r\n  get getDocNo() {\r\n    return this.form.controls.docNo\r\n  }\r\n\r\n  get getQtyReturned() {\r\n    return this.form.controls.qtyReturned\r\n  }\r\n\r\n  get getResolved() {\r\n    return this.form.controls.resolved\r\n  }\r\n\r\n  get getComment() {\r\n    return this.form.controls.comment\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}