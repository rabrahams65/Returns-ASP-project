{"ast":null,"code":"var _class;\n/* tslint:disable */\n/* eslint-disable */\nimport { HttpResponse } from '@angular/common/http';\nimport { filter, map } from 'rxjs/operators';\nimport { BaseService } from '../base-service';\nimport { RequestBuilder } from '../request-builder';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../api-configuration\";\nimport * as i2 from \"@angular/common/http\";\nexport class OwnerService extends BaseService {\n  constructor(config, http) {\n    super(config, http);\n  }\n  /** Path part for operation `searchOwner()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchOwner$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchOwner$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, OwnerService.SearchOwnerPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchOwner$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchOwner$Plain(params, context) {\n    return this.searchOwner$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchOwner()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchOwner$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, OwnerService.SearchOwnerPath, 'get');\n    if (params) {}\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchOwner$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  searchOwner(params, context) {\n    return this.searchOwner$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `createOwner()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `createOwner$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  createOwner$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, OwnerService.CreateOwnerPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/*+json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `createOwner$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  createOwner$Plain(params, context) {\n    return this.createOwner$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `createOwner()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  createOwner$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, OwnerService.CreateOwnerPath, 'post');\n    if (params) {\n      rb.body(params.body, 'application/*+json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `createOwner$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  createOwner(params, context) {\n    return this.createOwner$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `deleteOwner()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteOwner()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  deleteOwner$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, OwnerService.DeleteOwnerPath, 'delete');\n    if (params) {\n      rb.query('id', params.id, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r.clone({\n        body: undefined\n      });\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `deleteOwner$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  deleteOwner(params, context) {\n    return this.deleteOwner$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `findOwner()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findOwner$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findOwner$Plain$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, OwnerService.FindOwnerPath, 'get');\n    if (params) {\n      rb.path('id', params.id, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: 'text/plain',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findOwner$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findOwner$Plain(params, context) {\n    return this.findOwner$Plain$Response(params, context).pipe(map(r => r.body));\n  }\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findOwner()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findOwner$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, OwnerService.FindOwnerPath, 'get');\n    if (params) {\n      rb.path('id', params.id, {});\n    }\n    return this.http.request(rb.build({\n      responseType: 'json',\n      accept: 'text/json',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r;\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findOwner$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\n  findOwner(params, context) {\n    return this.findOwner$Response(params, context).pipe(map(r => r.body));\n  }\n  /** Path part for operation `updateOwner()` */\n\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `updateOwner()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  updateOwner$Response(params, context) {\n    const rb = new RequestBuilder(this.rootUrl, OwnerService.UpdateOwnerPath, 'put');\n    if (params) {\n      rb.path('id', params.id, {});\n      rb.body(params.body, 'application/*+json');\n    }\n    return this.http.request(rb.build({\n      responseType: 'text',\n      accept: '*/*',\n      context\n    })).pipe(filter(r => r instanceof HttpResponse), map(r => {\n      return r.clone({\n        body: undefined\n      });\n    }));\n  }\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `updateOwner$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\n  updateOwner(params, context) {\n    return this.updateOwner$Response(params, context).pipe(map(r => r.body));\n  }\n}\n_class = OwnerService;\n_class.SearchOwnerPath = '/Owner';\n_class.CreateOwnerPath = '/Owner';\n_class.DeleteOwnerPath = '/Owner';\n_class.FindOwnerPath = '/Owner/{id}';\n_class.UpdateOwnerPath = '/Owner/{id}';\n_class.ɵfac = function OwnerService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.ApiConfiguration), i0.ɵɵinject(i2.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpResponse","filter","map","BaseService","RequestBuilder","OwnerService","constructor","config","http","searchOwner$Plain$Response","params","context","rb","rootUrl","SearchOwnerPath","request","build","responseType","accept","pipe","r","searchOwner$Plain","body","searchOwner$Response","searchOwner","createOwner$Plain$Response","CreateOwnerPath","createOwner$Plain","createOwner$Response","createOwner","deleteOwner$Response","DeleteOwnerPath","query","id","clone","undefined","deleteOwner","findOwner$Plain$Response","FindOwnerPath","path","findOwner$Plain","findOwner$Response","findOwner","updateOwner$Response","UpdateOwnerPath","updateOwner","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\PC\\source\\repos\\Returns-ASP-project\\Returns-ASP-project\\ClientApp\\src\\app\\api\\services\\owner.service.ts"],"sourcesContent":["/* tslint:disable */\r\n/* eslint-disable */\r\nimport { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { filter, map } from 'rxjs/operators';\r\n\r\nimport { BaseService } from '../base-service';\r\nimport { ApiConfiguration } from '../api-configuration';\r\nimport { StrictHttpResponse } from '../strict-http-response';\r\nimport { RequestBuilder } from '../request-builder';\r\n\r\nimport { NewOwnerDto } from '../models/new-owner-dto';\r\nimport { Owner } from '../models/owner';\r\nimport { OwnerRm } from '../models/owner-rm';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class OwnerService extends BaseService {\r\n  constructor(config: ApiConfiguration, http: HttpClient) {\r\n    super(config, http);\r\n  }\r\n\r\n  /** Path part for operation `searchOwner()` */\r\n  static readonly SearchOwnerPath = '/Owner';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchOwner$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchOwner$Plain$Response(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<Array<OwnerRm>>> {\r\n    const rb = new RequestBuilder(this.rootUrl, OwnerService.SearchOwnerPath, 'get');\r\n    if (params) {\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<OwnerRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchOwner$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchOwner$Plain(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<Array<OwnerRm>> {\r\n    return this.searchOwner$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<OwnerRm>>): Array<OwnerRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `searchOwner()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchOwner$Response(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<Array<OwnerRm>>> {\r\n    const rb = new RequestBuilder(this.rootUrl, OwnerService.SearchOwnerPath, 'get');\r\n    if (params) {\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'json', accept: 'text/json', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<Array<OwnerRm>>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `searchOwner$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  searchOwner(\r\n    params?: {\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<Array<OwnerRm>> {\r\n    return this.searchOwner$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<Array<OwnerRm>>): Array<OwnerRm> => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `createOwner()` */\r\n  static readonly CreateOwnerPath = '/Owner';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `createOwner$Plain()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  createOwner$Plain$Response(\r\n    params?: {\r\n      body?: NewOwnerDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<NewOwnerDto>> {\r\n    const rb = new RequestBuilder(this.rootUrl, OwnerService.CreateOwnerPath, 'post');\r\n    if (params) {\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<NewOwnerDto>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `createOwner$Plain$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  createOwner$Plain(\r\n    params?: {\r\n      body?: NewOwnerDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<NewOwnerDto> {\r\n    return this.createOwner$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<NewOwnerDto>): NewOwnerDto => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `createOwner()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  createOwner$Response(\r\n    params?: {\r\n      body?: NewOwnerDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<NewOwnerDto>> {\r\n    const rb = new RequestBuilder(this.rootUrl, OwnerService.CreateOwnerPath, 'post');\r\n    if (params) {\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'json', accept: 'text/json', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<NewOwnerDto>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `createOwner$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  createOwner(\r\n    params?: {\r\n      body?: NewOwnerDto\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<NewOwnerDto> {\r\n    return this.createOwner$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<NewOwnerDto>): NewOwnerDto => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `deleteOwner()` */\r\n  static readonly DeleteOwnerPath = '/Owner';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `deleteOwner()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteOwner$Response(\r\n    params?: {\r\n      id?: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<void>> {\r\n    const rb = new RequestBuilder(this.rootUrl, OwnerService.DeleteOwnerPath, 'delete');\r\n    if (params) {\r\n      rb.query('id', params.id, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: '*/*', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `deleteOwner$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  deleteOwner(\r\n    params?: {\r\n      id?: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<void> {\r\n    return this.deleteOwner$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `findOwner()` */\r\n  static readonly FindOwnerPath = '/Owner/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findOwner$Plain()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findOwner$Plain$Response(\r\n    params: {\r\n      id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<OwnerRm>> {\r\n    const rb = new RequestBuilder(this.rootUrl, OwnerService.FindOwnerPath, 'get');\r\n    if (params) {\r\n      rb.path('id', params.id, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: 'text/plain', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<OwnerRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findOwner$Plain$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findOwner$Plain(\r\n    params: {\r\n      id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<OwnerRm> {\r\n    return this.findOwner$Plain$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<OwnerRm>): OwnerRm => r.body)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `findOwner()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findOwner$Response(\r\n    params: {\r\n      id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<OwnerRm>> {\r\n    const rb = new RequestBuilder(this.rootUrl, OwnerService.FindOwnerPath, 'get');\r\n    if (params) {\r\n      rb.path('id', params.id, {});\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'json', accept: 'text/json', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return r as StrictHttpResponse<OwnerRm>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `findOwner$Response()` instead.\r\n   *\r\n   * This method doesn't expect any request body.\r\n   */\r\n  findOwner(\r\n    params: {\r\n      id: string;\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<OwnerRm> {\r\n    return this.findOwner$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<OwnerRm>): OwnerRm => r.body)\r\n    );\r\n  }\r\n\r\n  /** Path part for operation `updateOwner()` */\r\n  static readonly UpdateOwnerPath = '/Owner/{id}';\r\n\r\n  /**\r\n   * This method provides access to the full `HttpResponse`, allowing access to response headers.\r\n   * To access only the response body, use `updateOwner()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  updateOwner$Response(\r\n    params: {\r\n      id: string;\r\n      body?: Owner\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<StrictHttpResponse<void>> {\r\n    const rb = new RequestBuilder(this.rootUrl, OwnerService.UpdateOwnerPath, 'put');\r\n    if (params) {\r\n      rb.path('id', params.id, {});\r\n      rb.body(params.body, 'application/*+json');\r\n    }\r\n\r\n    return this.http.request(\r\n      rb.build({ responseType: 'text', accept: '*/*', context })\r\n    ).pipe(\r\n      filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),\r\n      map((r: HttpResponse<any>) => {\r\n        return (r as HttpResponse<any>).clone({ body: undefined }) as StrictHttpResponse<void>;\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * This method provides access only to the response body.\r\n   * To access the full response (for headers, for example), `updateOwner$Response()` instead.\r\n   *\r\n   * This method sends `application/*+json` and handles request body of type `application/*+json`.\r\n   */\r\n  updateOwner(\r\n    params: {\r\n      id: string;\r\n      body?: Owner\r\n    },\r\n    context?: HttpContext\r\n  ): Observable<void> {\r\n    return this.updateOwner$Response(params, context).pipe(\r\n      map((r: StrictHttpResponse<void>): void => r.body)\r\n    );\r\n  }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}